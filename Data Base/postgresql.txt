               				-------------POSTGRESQL-------------




-> Postgresql is open source database. it’s an object-relational database management system.
-> it runs on all major operating systems 
-> it uses SQL to deal with it’s data
-> SQL is used to insert, update, and delete database records.  

1.installation of postgresql
 ->Go on https://www.postgresql.org this website
 ->click on Download 
 ->Choose your operating system
 ->For MAC
	-> Download just postgres.app
 ->For WINDOWS 
	-> Download the installer
 ->For Linux
	-> Copy the script and paste on the terminal
	# Create the file repository configuration:
	sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

	# Import the repository signing key:
	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -

	# Update the package lists:
	sudo apt-get update

	# Install the latest version of PostgreSQL.
	# If you want a specific version, use 'postgresql-12' or similar instead of 'postgresql':
	sudo apt-get -y install postgresql
2.Connect to database server 
	admin@admins-iMac ~ % psql -h localhost -p 5432 -U admin 
	psql (13.2)
	Type "help" for help.

	admin=# 
	OR
	admin@admins-iMac ~ % psql (It will take you you to default username and host)
	psql (13.2)
	Type "help" for help.

	admin=# 
3.Create Database
	admin=# CREATE DATABASE test;
	CREATE DATABASE
	admin=# 

4.List all the database
	admin=# \l
                                  List of databases
  	 Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
	-----------+----------+----------+-------------+-------------+-----------------------
 	admin     | admin    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
	 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 	template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 	template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 	test      | admin    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
	 text      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
	(6 rows)

	(END)
5.Connect to your database
	admin=# \c text
	You are now connected to database "text" as user "admin".
	text=# 
6.Drop database
	admin=# DROP DATABASE test;
	DROP DATABASE
	admin=# \l
                                  List of databases
	   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
	-----------+----------+----------+-------------+-------------+-----------------------
	 admin     | admin    | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
	 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 	template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 	template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 	text      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
	(5 rows)

	(END)

7.Create Table 
	test=# CREATE TABLE customer(
	test(# id int,
	test(# first_name VARCHAR(50),
	test(# last_name VARCHAR(50),
	test(# gender VARCHAR(7),
	test(# date_of_birth date);
	CREATE TABLE
	test=# 
8.Show the list of all the available table in the current database
	test=# \d
         List of relations
	 Schema |   Name   | Type  | Owner 
	--------+----------+-------+-------
	 public | customer | table | admin
	(1 row)

	test=# 
9.Drop table
	test=# DROP TABLE customer;
	DROP TABLE
	test=# \d
	Did not find any relations.
	test=# 
10.Create table using constraint
	test=# CREATE TABLE customer(
	test(# id BIGSERIAL NOT NULL PRIMARY KEY,
	test(# first_name VARCHAR(50),
	test(# last_name VARCHAR(50) NOT NULL,
	test(# gender VARCHAR(7),
	test(# date_of_birth DATE NOT NULL);
	CREATE TABLE
	test=# \d
	              List of relations
	 Schema |      Name       |   Type   | Owner 
	--------+-----------------+----------+-------
	 public | customer        | table    | admin
	 public | customer_id_seq | sequence | admin
	(2 rows)
11.Insert date into table
	test=# SELECT * FROM customer;
	 id | first_name | last_name | gender | date_of_birth 
	----+------------+-----------+--------+---------------
	(0 rows)
	test=# INSERT INTO customer (first_name,
	last_name,
	gender,
	date_of_birth)
	VALUES ('Jake', 'Smith', 'MALE', date '1998-12-02');
	INSERT 0 1
	test=# SELECT * FROM customer;
                         test
 	id | first_name | last_name | gender | date_of_birth 
	----+------------+-----------+--------+---------------
 	 1 | Jake       | Smith     | MALE   | 1998-12-02
	(1 row)

12.Insert values from files
	test=# \i /Users/admin/Desktop/mi.sql
	psql:/Users/admin/Desktop/mi.sql:8: ERROR:  relation "customer" already exists
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	INSERT 0 1
	test=# SELECT * FROM customer;
 	id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
	  1 | Christiana | Claypoole     | Male   | 2020-05-03
  	  2 | Jeddy      | Imore         | Male   | 2020-11-09
 	  3 | Osmund     | Bygraves      | Male   | 2020-07-26
 	  4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
	  5 | Alvera     | Drohan        | Male   | 2021-02-09
 	  6 | Alfy       | Dungey        | Male   | 2021-03-06
 	  7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
  	  8 | Cathrin    | Peevor        | Male   | 2020-08-14
  	  9 | Charmion   | Gaish         | Male   | 2021-03-03
 	 10 | Ellie      | Reese         | Male   | 2021-03-11
	 (10 rows)

13.Order by (sort the result in ascending or descending order)
	test=# SELECT * FROM customer ORDER BY first_name DESC;
 	id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
	  4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
	  3 | Osmund     | Bygraves      | Male   | 2020-07-26
	  2 | Jeddy      | Imore         | Male   | 2020-11-09
	  7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
	 10 | Ellie      | Reese         | Male   | 2021-03-11
	  1 | Christiana | Claypoole     | Male   | 2020-05-03
	  9 | Charmion   | Gaish         | Male   | 2021-03-03
 	  8 | Cathrin    | Peevor        | Male   | 2020-08-14
 	  5 | Alvera     | Drohan        | Male   | 2021-02-09
 	  6 | Alfy       | Dungey        | Male   | 2021-03-06
	 (10 rows)

14.Dictinct function
	->Used to fetch distinct values from table
	test=# SELECT DISTINCT first_name FROM customer ORDER BY first_name DESC;
	 first_name 
	------------
 	Rudd
 	Osmund
 	Jeddy
	 Henderson
 	Ellie
 	Christiana
 	Charmion
 	Cathrin
 	Alvera
 	Alfy
	(10 rows)
15.WHERE clause
	Used to filter the records on the basics of conditions.
	test=# SELECT * FROM customer WHERE gender= 'Male';
	 id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
 	 1 | Christiana | Claypoole     | Male   | 2020-05-03
 	 2 | Jeddy      | Imore         | Male   | 2020-11-09
 	 3 | Osmund     | Bygraves      | Male   | 2020-07-26
 	 4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
  	 5 | Alvera     | Drohan        | Male   | 2021-02-09
  	 6 | Alfy       | Dungey        | Male   | 2021-03-06
         7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
  	 8 | Cathrin    | Peevor        | Male   | 2020-08-14
  	 9 | Charmion   | Gaish         | Male   | 2021-03-03
 	10 | Ellie      | Reese         | Male   | 2021-03-11
	(10 rows)

	SELECT * FROM customer WHERE date_of_birth >'2020-06-03';
 	id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
	  2 | Jeddy      | Imore         | Male   | 2020-11-09
	  3 | Osmund     | Bygraves      | Male   | 2020-07-26
 	  4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
 	  5 | Alvera     | Drohan        | Male   | 2021-02-09
 	  6 | Alfy       | Dungey        | Male   | 2021-03-06
 	  7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
  	  8 | Cathrin    | Peevor        | Male   | 2020-08-14
  	  9 | Charmion   | Gaish         | Male   | 2021-03-03
	 10 | Ellie      | Reese         | Male   | 2021-03-11
	 (9 rows)

	test=# SELECT * FROM customer WHERE date_of_birth >'2020-06-03' AND gender='Male';
	 id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
 	 2 | Jeddy      | Imore         | Male   | 2020-11-09
 	 3 | Osmund     | Bygraves      | Male   | 2020-07-26
 	 4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
 	 5 | Alvera     | Drohan        | Male   | 2021-02-09
 	 6 | Alfy       | Dungey        | Male   | 2021-03-06
 	 7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
 	 8 | Cathrin    | Peevor        | Male   | 2020-08-14
 	 9 | Charmion   | Gaish         | Male   | 2021-03-03
 	10 | Ellie      | Reese         | Male   | 2021-03-11
	(9 rows)

	test=# SELECT * FROM customer WHERE date_of_birth >'2020-06-03' OR gender='Male';
	 id | first_name |   last_name   | gender | date_of_birth 
	----+------------+---------------+--------+---------------
	  1 | Christiana | Claypoole     | Male   | 2020-05-03
 	 2 | Jeddy      | Imore         | Male   | 2020-11-09
 	 3 | Osmund     | Bygraves      | Male   | 2020-07-26
 	 4 | Rudd       | Grzegorzewski | Male   | 2020-10-08
 	 5 | Alvera     | Drohan        | Male   | 2021-02-09
 	 6 | Alfy       | Dungey        | Male   | 2021-03-06
	 7 | Henderson  | Wilcinskis    | Male   | 2020-10-30
 	 8 | Cathrin    | Peevor        | Male   | 2020-08-14
  	 9 | Charmion   | Gaish         | Male   | 2021-03-03
	10 | Ellie      | Reese         | Male   | 2021-03-11
	(10 rows)

	test=# SELECT * FROM customer WHERE first_name LIKE '%n';
	 id | first_name | last_name  | gender | date_of_birth 
	----+------------+------------+--------+---------------
	  7 | Henderson  | Wilcinskis | Male   | 2020-10-30
	  8 | Cathrin    | Peevor     | Male   | 2020-08-14
 	 9 | Charmion   | Gaish      | Male   | 2021-03-03
	(3 rows)

	test=# SELECT * FROM customer WHERE first_name LIKE '%e%';
 	id | first_name | last_name  | gender | date_of_birth 
	----+------------+------------+--------+---------------
 	 2 | Jeddy      | Imore      | Male   | 2020-11-09
	 5 | Alvera     | Drohan     | Male   | 2021-02-09
 	 7 | Henderson  | Wilcinskis | Male   | 2020-10-30
 	10 | Ellie      | Reese      | Male   | 2021-03-11
	(4 rows)

	test=# SELECT * FROM CUSTO WHERE salary BETWEEN 50000 AND 90000;
 	id | first_name | last_name |   gender    | salary |  country  
	----+------------+-----------+-------------+--------+-----------
 	 6 | Olia       | Roselli   | Female      |  75699 | Colombia
 	 9 | Mame       | Gorries   | Male        |  57819 | Indonesia
 	11 | Adelheid   | Clewley   | Female      |  83710 | Russia
	 12 | Burnard    | Perche    | Genderqueer |  83220 | China
	(5 rows)


	test=# SELECT * FROM CUSTO WHERE salary NOT IN (50000,80000);
	 id | first_name | last_name  |   gender    | salary |  country  
	----+------------+------------+-------------+--------+-----------
 	 1 | Laurena    | Trase      | Female      |  32569 | Iran
 	 2 | Ingemar    | Syrad      | Polygender  |  30468 | Syria
 	 3 | Anton      | Asple      | Female      |  90025 | Portugal
 	 4 | Marti      | Higounet   | Non-binary  |  70710 | Poland
 	 5 | Townsend   | Spollen    | Female      |  95714 | Indonesia
  	 6 | Olia       | Roselli    | Female      |  75699 | Colombia
 	 7 | Allis      | Witheridge | Male        |  20494 | France
 	 8 | Kelbee     | Braben     | Non-binary  |  97507 | Mexico
 	 9 | Mame       | Gorries    | Male        |  57819 | Indonesia
 	10 | Claire     | Terram     | Female      |  42183 | China
 	11 | Adelheid   | Clewley    | Female      |  83710 | Russia
 	12 | Burnard    | Perche     | Genderqueer |  83220 | China

	test=# SELECT * FROM CUSTO WHERE EXISTS (SELECT * FROM CUSTO WHERE salary<90000);
 	id | first_name | last_name  |   gender    | salary |  country  
	----+------------+------------+-------------+--------+-----------
  	1 | Laurena    | Trase      | Female      |  32569 | Iran
  	2 | Ingemar    | Syrad      | Polygender  |  30468 | Syria
 	3 | Anton      | Asple      | Female      |  90025 | Portugal
  	4 | Marti      | Higounet   | Non-binary  |  70710 | Poland
  	5 | Townsend   | Spollen    | Female      |  95714 | Indonesia
  	6 | Olia       | Roselli    | Female      |  75699 | Colombia
  	7 | Allis      | Witheridge | Male        |  20494 | France
  	8 | Kelbee     | Braben     | Non-binary  |  97507 | Mexico
  	9 | Mame       | Gorries    | Male        |  57819 | Indonesia
       10 | Claire     | Terram     | Female      |  42183 | China
       11 | Adelheid   | Clewley    | Female      |  83710 | Russia
       12 | Burnard    | Perche     | Genderqueer |  83220 | China
	(12 rows)

16.Aggregate functions in postgresql

	test=# SELECT COUNT(*) FROM CUSTO;
	count 
	-------
  	  12
	test=# SELECT MAX(salary) FROM CUSTO;
	  max  
	-------
	 97507

	test=# SELECT SUM(salary) FROM CUSTO;
	  sum   
	--------
	 780118

	test=# SELECT AVG(salary) FROM CUSTO;
        avg         
	--------------------
	 65009.833333333333

	test=# SELECT MIN(salary) FROM CUSTO;
  	min  
	-------
	 20494

17.Group by statement
	test=# SELECT COUNT(*), country FROM CUSTO GROUP BY country;
 	count |  country  
	-------+-----------
     	2 | Indonesia
     	1 | Portugal
     	1 | Colombia
     	1 | France
     	1 | Syria
     	2 | China
     	1 | Iran
     	1 | Russia
     	1 | Mexico
     	1 | Poland
	(10 rows)

17.Having clause in postgresql
	test=# SELECT COUNT(*), country FROM CUSTO GROUP BY country HAVING 			country='Indonesia';
 	count |  country  
	-------+-----------
     	2 | Indonesia
	(1 row)

18.Limit clause
	test=# SELECT * FROM CUSTO LIMIT 5;
 	id | first_name | last_name |   gender   | salary |  country  
	----+------------+-----------+------------+--------+-----------
  	1 | Laurena    | Trase     | Female     |  32569 | Iran
  	2 | Ingemar    | Syrad     | Polygender |  30468 | Syria
  	3 | Anton      | Asple     | Female     |  90025 | Portugal
  	4 | Marti      | Higounet  | Non-binary |  70710 | Poland
  	5 | Townsend   | Spollen   | Female     |  95714 | Indonesia

	test=# SELECT * FROM CUSTO OFFSET 5 LIMIT 3;
 	id | first_name | last_name  |   gender   | salary | country  
	----+------------+------------+------------+--------+----------
  	6 | Olia       | Roselli    | Female     |  75699 | Colombia
  	7 | Allis      | Witheridge | Male       |  20494 | France
  	8 | Kelbee     | Braben     | Non-binary |  97507 | Mexico
	(3 rows)
	(5 rows)
19.Indexes

	test=# explain select * from custo;
                        QUERY PLAN                        
	----------------------------------------------------------
 	Seq Scan on custo  (cost=0.00..11.50 rows=150 width=508)

	test=# CREATE INDEX row ON custo(id);
	CREATE INDEX
	test=# EXPLAIN SELECT * FROM custo where id=4;
                      QUERY PLAN                       
	-------------------------------------------------------
	 Seq Scan on custo  (cost=0.00..1.15 rows=1 width=508)
 	  Filter: (id = 4)
	(2 rows)

20.Join
	->INNER JOIN
	test=# SELECT emp_id, name, dept FROM company INNER JOIN department
        ON company.id = department.emp_d;
	 emp_id | name  | dept
	--------+-------+------------
     	 1 | Paul  | IT Billing
     	 2 | Allen | Engineering

	->LEFT OUTER JOIN
	test=# SELECT emp_id, name, dept FROM company LEFT OUTER JOIN department
   	ON company.id = department.emp_d;
	emp_id | name  | dept
	--------+-------+------------
     	 1 | Paul  | IT Billing
     	 2 | Allen | Engineering
      	   | James |
      	   | David |
      	   | Paul  |
       	   | Mark  |
       	   | Teddy |
       	   | James |
	->RIGHT OUTER JOIN
	test=# SELECT emp_id, name, dept FROM company RIGHT OUTER JOIN department
   	ON company.id = department.emp_d;
	emp_id | name  | dept
	--------+-------+--------
     	 1 | Paul  | IT Billing
     	 2 | Allen | Engineering
      	 7 |       | Finance

	->FULL OUTER JOIN
	test=# SELECT emp_id, name, dept FROM company FULLOUTER JOIN department
   	ON company.id = department.emp_d;
	emp_id | name  | dept
	--------+-------+---------------
	      1 | Paul  | IT Billing
	      2 | Allen | Engineering
	      7 |       | Finance
	        | James |
	        | David |
 	        | Paul  |
 	        | Mark  |
 	        | Teddy |
 	        | James |

21.UNONS
	test=# SELECT emp_id, name, dept FROM company INNER JOIN department
        ON company.id = department.emp_d;
   	UNION
        test=# SELECT emp_id, name, dept FROM company LEFT OUTER JOIN department
   	ON company.id = department.emp_d;
	 emp_id | name  |  dept
	--------+-------+--------------
	      5 | David | Engineering
	      6 | Kim   | Finance
	      2 | Allen | Engineering
 	      3 | Teddy | Engineering
 	      4 | Mark  | Finance
 	      1 | Paul  | IT Billing
 	      7 | James | Finance
	 (7 rows)


