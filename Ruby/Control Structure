Control structure -> control structure add dynamism to the code
		  -> it determine circumstances when code executes 
		  -> we use condition under which if this condition meets execute this line of code 
		  -> we use loops by which we decide how many times the code should execute
		  -> we also use condition in loops that if condition meet execute this
		  -> we use iterators which use object and for those object iterators execute the lines of code for each object 
		  -> Ruby uses the keyword end to signify the end of a body 
		  -> you can use multiple line of codes 


HERE'S THE TYPES OF CONTROL STRUCTURE 


1.Conditionals : if, else, elsif -> 

	structure of if ->

		1. if boolean 
			code .....

		   end

		2. if conditional 
			code....
		   end


	ex - 3.0.1 :038 > x = true 
	 => true 
	3.0.1 :039 > if x 
	3.0.1 :040 >   puts x
	3.0.1 :041 > end
	true
	 => nil 
	3.0.1 :042 > y = 19
 	=> 19 
	3.0.1 :043 > if y>10
	3.0.1 :044 >   print "number is #{y}"
	3.0.1 :045 > end
	number is 19 => nil 
	3.0.1 :046 > if y>20
	3.0.1 :047 >   print "number is #{y}"
	3.0.1 :048 > end
	 => nil 



	2.else -> we use else to execute that line of code if that condition is not meet
	       ->this is called default code mean if that condition is not meet it execute by default


	Structure of else-> 

		if condition
			code....
		else
			code..
		end

	ex - 3.0.1 :049 > if y>20
	3.0.1 :050 >   print "number is less"
	3.0.1 :051 > else
	3.0.1 :052 >   print "your number is #{y}"
	3.0.1 :053 > end
	your number is 19 => nil 
	3.0.1 :060 > if x == "sam"
	3.0.1 :061 >   print "hello #{x}"
	3.0.1 :062 > else
	3.0.1 :063 >   print "who are you"
	3.0.1 :064 > end
	hello sam => nil 
	3.0.1 :065 > x = "sai"
 	=> "sai" 
	3.0.1 :066 > if x == "sam"
	3.0.1 :067 >   print "hello #{x}"
	3.0.1 :068 > else
	3.0.1 :069 >   print "who are you"
	3.0.1 :070 > end
	who are you => nil 


	3.elsif -> we use this if we have more than one condition 

	
	structure of elsif 

		if condition 
			code....
		elsif condition
			code..
		elsif condition
			code..
		else
			code..
		end


		ex - 3.0.1 :071 > x = "sam" 
 	=> "sam" 
	3.0.1 :072 > y = "sai"
	 => "sai" 
	3.0.1 :073 > if x = "sam"
	3.0.1 :074 >   print "hello #{x}"
	3.0.1 :075 > elsif x != "sam"
	3.0.1 :076 >   print "who are you"
	3.0.1 :077 > else 
	3.0.1 :078 >   print "bye"
	3.0.1 :079 > end
	(irb):73: warning: found `= literal' in conditional, should be ==
	hello sam => nil 
	puts "Please enter your name "
	x = gets.chomp()
	if x == "sam"
  	print "Hello #{x} how you"
	elsif x=="sai"
  	print "who are you"
	else
  	print "Bye"
	end
	admin@admins-iMac Ruby % ruby practice.rb
	Please enter your name
	sam
	Hello sam how you%

	admin@admins-iMac Ruby % ruby practice.rb
	Please enter your name
	sia
	Bye%
	admin@admins-iMac Ruby % ruby practice.rb
	Please enter your name
	sai
	who are you%	
	x = gets.to_i
	if x <10
  	print "good"
	elsif x <20
  	print "very good"
	else
  	print "bad"
	end
	admin@admins-iMac Ruby % ruby me.rb

	2
	good%
	admin@admins-iMac Ruby % ruby me.rb
	2
	good%
	admin@admins-iMac Ruby % ruby me.rb
	14
	very good%
	admin@admins-iMac Ruby % ruby me.rb
	21
	bad%
	3.0.1 :051 > x = 1
	 => 1 
	3.0.1 :052 > if x > 2
	3.0.1 :053 >    puts "x is greater than 2"
	3.0.1 :054 > elsif x <= 2 and x!=0
	3.0.1 :055 >    puts "x is 1"
	3.0.1 :056 > else
	3.0.1 :057 >    puts "I can't guess the number"
	3.0.1 :058 > end
	x is 1
 	=> nil 
	3.0.1 :076 > a = 15
 	=> 15 
	3.0.1 :077 >    
	3.0.1 :078 > if a >= 18
	3.0.1 :079 >   puts "You are eligible to vote."
	3.0.1 :080 > else
	3.0.1 :081 >   puts "You are not eligible to vote."
	3.0.1 :082 > end
	You are not eligible to vote.
 	=> nil 
	3.0.1 :083 > a = 78  
 	=> 78 
	3.0.1 :084 > if a  < 50   
	3.0.1 :085 >   puts "Student is failed"  
	3.0.1 :086 >    
	3.0.1 :087 > elsif a >= 50 && a <= 60   
	3.0.1 :088 >   puts "Student gets D grade"  
	3.0.1 :089 >    
	3.0.1 :090 > elsif a >= 70 && a <= 80   
	3.0.1 :091 >   puts "Student gets B grade" 
	3.0.1 :092 >     
	3.0.1 :093 > elsif a >= 80 && a <= 90   
	3.0.1 :094 >   puts "Student gets A grade" 
	3.0.1 :095 >      
	3.0.1 :096 > elsif a >= 90 && a <= 100   
	3.0.1 :097 >   puts "Student gets A+ grade"    
	3.0.1 :098 > end
	Student gets B grade
 	=> nil 
	3.0.1 :137 > if animal1 == "cat" && animal2 == "dog"
	3.0.1 :138 >     puts 2
	3.0.1 :139 > end
	2
 	=> nil 
	3.0.1 :140 > 
	3.0.1 :141 > # Or operators.
	3.0.1 :142 > if animal1 == "whale" or animal2 == "dog"
	3.0.1 :143 >     puts 3
	3.0.1 :144 > end
	3
	 => nil 
	3.0.1 :145 > 
	3.0.1 :146 > if animal1 == "whale" || animal2 == "dog"
	3.0.1 :147 >     puts 4
	3.0.1 :148 > end
	4
	 => nil 

2.Conditionals -> unless -> this is opposite of if statements
			 -> it act in same way putting not operator in if conditions

	structure of unless

	unless condition
		code...
	else
		code..
	end


	ex - 3.0.1 :025 > x = 12
	 => 12 
	3.0.1 :026 > unless x<12
	3.0.1 :027 >   print "hello"
	3.0.1 :028 > end
	hello => nil 
	3.0.1 :029 > i
	x = 1 
	3.0.1 :065 > x = 1 
 	=> 1 
	3.0.1 :066 > unless x>=2
	3.0.1 :067 >    puts "x is less than 2"
	3.0.1 :068 >  else
	3.0.1 :069 >    puts "x is greater than 2"
	3.0.1 :070 > end
	x is less than 2
 	=> nil 
	3.0.1 :072 > a = 20
 	=> 20 
	3.0.1 :073 > if a >= 18
	3.0.1 :074 >   puts "You are eligible to vote."
	3.0.1 :075 > end
	You are eligible to vote.
 	=> nil 
	3.0.1 :099 > a = 1
	 => 1 
	3.0.1 :100 > 
	3.0.1 :101 > unless a >4 
	3.0.1 :102 >     puts "Welcome!"
	3.0.1 :103 >   
	3.0.1 :104 > else
	3.0.1 :105 >     puts "Hello!"
	3.0.1 :106 >       
	3.0.1 :107 > end
	Welcome!
 	=> nil 
	3.0.1 :108 > b = 0
	 => 0 
	3.0.1 :109 > b += 2 unless b.zero?
	3.0.1 :110 >     puts(b)
	0
	3.0.1 :113 > unless weight < 85
	3.0.1 :114 >   puts "you are overweight, so you need to go on a diet and have pl
	enty of exercise"
	3.0.1 :115 > end
	you are overweight, so you need to go on a diet and have plenty of exercise
	 => nil 
	3.0.1 :121 > i = 4
	 => 4 
	3.0.1 :122 > 
	3.0.1 :123 > # Use an unless-else construct.
	3.0.1 :124 > unless i == 3
	3.0.1 :125 >     puts "UNLESS"
	3.0.1 :126 > else
	3.0.1 :127 >     puts "ELSE"
	3.0.1 :128 > end
	UNLESS


3.Conditional -> case -> we use the case statement to test a sequence of conditions. 
	      -> this is superficially similar to switch in C.
	      ->it provides an easy way to forward execution to different parts of code based on the value of the expression.


	-> there are three importants keywords we used in case statements

	1.case. it takes the variables that will be used by when keyword	
	2.when. it is similar to case keyword in another programming languages. it is used to match a single condition.we can use multiple when statements depend upon need with single car statement.
	3.else. it is similar to the default keyword in another programming languages.it is optional and will execute when nothing matches.


	
	structure of case->

		case expression|boolean

		when expression|boolean 1
			code....

		when expression|boolean 2
			code....

		when expression|boolean 3
			code....

		when expression|boolean 4
			code...

		else
			code...
		end


	ex - 3.0.1 :161 > capacity = 24
 	=> 24 
	3.0.1 :162 > case capacity
	3.0.1 :163 > when 0
	3.0.1 :164 >   "You ran out of gas."
	3.0.1 :165 > when 1..20
	3.0.1 :166 >   "The tank is almost empty. Quickly, find a gas station!"
	3.0.1 :167 > when 21..70
	3.0.1 :168 >   "You should be ok for now."
	3.0.1 :169 > when 71..100
	3.0.1 :170 >   "The tank is almost full."
	3.0.1 :171 > else
	3.0.1 :172 >   "Error: capacity has an invalid value (#{capacity})"
	3.0.1 :173 > end
	 => "You should be ok for now." 
	3.0.1 :174 > capacity = 98
 	=> 98 
	3.0.1 :175 > case capacity
	3.0.1 :176 > when 0
	3.0.1 :177 >   "You ran out of gas."
	3.0.1 :178 > when 1..20
	3.0.1 :179 >   "The tank is almost empty. Quickly, find a gas station!"
	3.0.1 :180 > when 21..70
	3.0.1 :181 >   "You should be ok for now."
	3.0.1 :182 > when 71..100
	3.0.1 :183 >   "The tank is almost full."
	3.0.1 :184 > else
	3.0.1 :185 >   "Error: capacity has an invalid value (#{capacity})"
	3.0.1 :186 > end
 	=> "The tank is almost full."
	3.0.1 :187 > serial_code = /\AC/
 	=> /\AC/ 
	3.0.1 :188 > case serial_code
	3.0.1 :189 > when /\AC/
	3.0.1 :190 >   "Low risk"
	3.0.1 :191 > when /\AL/
	3.0.1 :192 >   "Medium risk"
	3.0.1 :193 > when /\AX/
	3.0.1 :194 >   "High risk"
	3.0.1 :195 > else
	3.0.1 :196 >   "Unknown risk"
	3.0.1 :197 > end
 	=> "Unknown risk" 
	3.0.1 :198 > serial_code = /\AX/
 	=> /\AX/ 
	3.0.1 :199 > case serial_code
	3.0.1 :200 > when /\AC/
	3.0.1 :201 >   "Low risk"
	3.0.1 :202 > when /\AL/
	3.0.1 :203 >   "Medium risk"
	3.0.1 :204 > when /\AX/
	3.0.1 :205 >   "High risk"
	3.0.1 :206 > else
	3.0.1 :207 >   "Unknown risk"
	3.0.1 :208 > end
	3.0.1 :209 > i=8
	 => 8 
	3.0.1 :210 > case i
	3.0.1 :211 > when 1, 2..5
	3.0.1 :212 > print "1..5\n"
	3.0.1 :213 >  when 6..10
	3.0.1 :214 >   print "6..10\n"
	3.0.1 :215 > end
	6..10
 	=> nil 
	3.0.1 :216 > print "Enter your day: "   
	Enter your day:  => nil 
	3.0.1 :217 > day = gets.chomp   
	Sunday
 	=> "Sunday" 
	3.0.1 :218 > case day   
	3.0.1 :219 > when "Tuesday"   
	3.0.1 :220 >   puts 'Wear Red or Orange'   
	3.0.1 :221 > when "Wednesday"   
	3.0.1 :222 >   puts 'Wear Green'   
	3.0.1 :223 > when "Thursday"   
	3.0.1 :224 >   puts 'Wear Yellow'   
	3.0.1 :225 >  when "Friday"   
	3.0.1 :226 >   puts 'Wear White'   
	3.0.1 :227 >  when "Saturday"   
	3.0.1 :228 >   puts 'Wear Black'   
	3.0.1 :229 > else   
	3.0.1 :230 >   puts "Wear Any color"   
	3.0.1 :231 > end  
	Wear Any color
 	=> nil 

4.Loop -> loop in ruby are used to execute the same block of code a specified number of times. 


	SOME KEYWORDS USED IN LOOP
	1. break -> terminate the whole loop. jump out of the loop
	2. next -> jump to next loop
	3. redo -> redo this loop or traverse the loop
	4. retry -> start the whole loop over


	structure of loop -> 

	->loop do 
		code....

	 end

	this in an obsolete structure in loop

	while statement

	->while boolean
		code...
	 end

	or 
	until statement

	->until boolean
		code..
	 end


	ex - print "enter the number "

	x = gets.chomp.to_i

	loop do
  	 break if x>10
    	  puts x
    	  x += 1
  	end

	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	enter the number 1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
	arr = ["hello","sam","how","hi"]


	loop do
  	 break if arr.empty?
    	  puts arr.first
    	  arr.shift
  	end

	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	hello
	sam
	how
	hi
	arr = ["hello","sam","how","hi"]


	while !arr.empty?
	  puts arr.first
	  arr.shift
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	hello
	sam
	how
	hi
	$i = 0
	$num = 5

	while $i < $num  do
	   puts("Inside the loop i = #$i" )
	   $i +=1
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	Inside the loop i = 0
	Inside the loop i = 1
	Inside the loop i = 2
	Inside the loop i = 3
	Inside the loop i = 4

	x = 4

	while x >= 1 
	  puts "Hello world"
	  x = x - 1
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	Hello world
	Hello world
	Hello world
	Hello world
	i = 0
	loop do
	  i += 2
	  if i == 4
	    next        
	  end
	  puts i
	  if i == 10
	    break
	  end
	end

	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	2
	6
	8
	10
	x = gets.chomp.to_i

	while x >= 0
	  puts x
	  x = x - 1
	end

	puts "Done!"
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	6
	6
	5
	4
	3
	2
	1
	0
	Done!
	i = 0
	while i < 5
	   puts i
	   i += 1
	   break if i == 2
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	0
	1
	i = 1
	while i<=10
	puts i*14
	i=i+1
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	14
	28
	42
	56
	70
	84
	98
	112
	126
	140
	a = 5
	b = 1
	while a>0
	  while b<=5
	    puts "*"*b
	    b = b+1
	    a = a-1
	  end
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	*
	**
	***
	****
	*****
	a = 5
	while a>0
	  b = 1
	  while b<=5
	    puts "*"*b
	    b = b+1
	  end
	  a = a-1
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	*
	**
	***
	****
	*****
	*
	**
	***
	****
	*****
	*
	**
	***
	****
	*****
	*
	**
	***
	****
	*****
	*
	**
	***
	****
	*****

4. iterate -> iterate means doing one thing multiple times and that is what iterator do.
	   -> sometimes iterators are termed as the custom loops 
	   -> it is methods which are supported by collections (string, arrays, hashes)
	   -> this method is use to perform code each item in a set

	

	-> we use iterators on different class

	1.for string
	 ->each_line
	 ->each_char
	 ->each_byte

	2.for numbers
	 ->times
	 ->uptown
	 ->downto
	 ->step

	3.for range 

	 ->each
	 ->step

	4.for array
	
	 ->each
	 ->each_index
	 ->each_with_index

	5.for hash

	 -> each
	 ->each_key
	 ->each_value
	 ->each_pair

	ex - a= [4, 3, 2, 1, 0]
	a.each do |variable_name|
	   puts a
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	4
	3
	2
	1
	0
	(0..9).each do |i|

	    puts i

	end

	a = ['H', 'e', 'l', 'l', 'o']

	puts "\n"
  
	a.each do|arr|

	    puts arr

	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	0
	3
	4
	5
	7
	8
	9

	H
	e
	l
	l
	o
	a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
	b = a.collect{ |y| (5 * y) }
	puts b
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	5
	10
	15
	20
	25
	30
	35
	40
	45
	50
	7.times do |i|
	    puts i
	end
	7.times do |i|
	    puts i
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	0
	1
	2
	3
	4
	5
	6
	4.upto(7) do |n|
	  puts n
	end
  
	7.upto(4) do |n|
	  puts n
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	4
	5
	6
	7
	7.downto(4) do |n|
	  puts n
	end


	4.downto(7) do |n|
	  puts n
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	
	6
	5
	4
	(0..60).step(10) do|i|
	    puts i
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	0
	10
	20
	30
	40
	50
	60
	"Hello\nworld\nsay\nhello".each_line do|i|
	puts i
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	Hello
	world
	say
	hello
	(1...5).each do |i|   
	   puts i   
	end  
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	1
	2
	3
	4
	numbers = [1, 2, 3, 4, 5].collect.with_index do |number, index|
	  number + index
	end
	puts numbers
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	1
	3
	5
	7
	9
	(1…5).each do |i|
	puts i
	end
	array = ['a', 'b', 'c']

	array.each do |item|
	  puts item
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	a
	b
	c
	word = ''

	['r', 'u', 'b', 'y'].each do |letter|
	  word += letter
	end
	word = ''

	['r', 'u', 'b', 'y'].each do |letter|
	  word += letter
	end
	print word
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	ruby% 
	array = [1, 2, 3, 4, 5]
	
	array.map do |item|
	  item ** 2
	end
	print array
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	[1, 2, 3, 4, 5]% 
	(1..10).select do |item|
	  item.even?
	  print item
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	12345678910%      
	(1..10).any? do |item|
	  puts item.even?
	end
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	false
	true
	false
	true
	false
	true
	false
	true
	false
	true
	5.times do |iterator|
	  puts "#{iterator}. I repeat this text."
	end                    
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	0. I repeat this text.
	1. I repeat this text.
	2. I repeat this text.
	3. I repeat this text.
	4. I repeat this text.
	arr = [1, 2, 3, 4, 5]
	arr.each { |a| print a -= 10, " " }
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	-9 -8 -7 -6 -5 % 
	arr = [1, 2, 3, 4, 5]
	arr.each_with_index { |val,index| puts "index: #{index},value:#{val}"}
	admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/me.rb 
	index: 0,value:1
	index: 1,value:2
	index: 2,value:3
	index: 3,value:4
	index: 4,value:5