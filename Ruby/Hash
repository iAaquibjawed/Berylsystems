-> Hash is an unordered, object collection of objects (or key-value pairs

->It is similar to an Array, except that indexing is done via arbitrary keys of nay object type, not an integer index.

->The order in which you traverse a hash by either key or value 

-> If you attempt to access a hash with a key that does not exist, the method will return nil.

->The only difference between Array and Hash is Array in an order type collection of object where as Hash is an un ordered type collection of an object.

-> it has a unique key.

-> Sometimes Hashes are called associative arrays, dictionaries or maps.


CREATING RUBY HASH

-> Ruby hash is created by writing key-value pair within {} curly braces.

	ex - 3.0.1 :001 > color = {   
	3.0.1 :002 >     "Rose" => "red",   
	3.0.1 :003 >     "Lily" => "purple",   
	3.0.1 :004 >     "Marigold" => "yellow",   
	3.0.1 :005 >     "Jasmine" => "white"   
	3.0.1 :006 > }   
	 => {"Rose"=>"red", "Lily"=>"purple", "Marigold"=>"yellow", "Jasmine"=>"wh... 
	3.0.1 :007 > 

	or

  -> you can also create using symbol 

	ex - 3.0.1 :011 > animals = {:tall => "giraffe", :minute => "kitten"}
	 => {:tall=>"giraffe", :minute=>"kitten"} 


Access values from Hash
 -> To fetch a hash value, write the required key within [] square bracket.

	ex - 3.0.1 :012 > 3.0.1 :016 > color
 	=> {"Rose"=>"red", "Lily"=>"purple", "Marigold"=>"yellow", "Jasmine"=>"white"} 
	puts color['Rose']   
	red
	 => nil 
	3.0.1 :013 >   puts color['Lily']   
	purple
	 => nil 
	3.0.1 :014 > puts color['Marigold'] 
	yellow
	 => nil 
	3.0.1 :015 >   puts color['Jasmine']  
	white
	 => nil 

 -> to fetch a hash value having key as symbol 

	 ex - 3.0.1 :017 > animals 
 	=> {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :018 > puts animals[:tall]
	giraffe
	 => nil 
	3.0.1 :019 > puts animals[:minute]
	kitten
 	=> nil 


Modify Hash
 -> A Ruby hash can be modified by adding or removing a key value pair in an already existing hash. 

	ex - 3.0.1 :020 > color
 	=> {"Rose"=>"red", "Lily"=>"purple", "Marigold"=>"yellow", "Jasmine"=>"white"} 
	3.0.1 :021 > color['Tulip'] = "pink"   
 	=> "pink" 
	3.0.1 :022 > color['Marigold'] = 'Blue'
 	=> "Blue" 
	3.0.1 :023 > color
 	=> 
	{"Rose"=>"red",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 

Hash Methods

1.Public class methods 


1.Hash[] -> create a new empty hash
	 ex - 3.0.1 :024 > a = Hash[]
	 => {} 
	3.0.1 :025 > a
 	=> {} 

2.Hash[hash] -> create a new hash from hash

	ex - 3.0.1 :026 > b = Hash[animals]
	 => {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :027 > b
 	=> {:tall=>"giraffe", :minute=>"kitten"} 

3.Hash[[elements_array]] - > create a new hash with give array 

	 ex - 3.0.1 :028 > x = [1,2,3,4]
 	=> [1, 2, 3, 4] 
	3.0.1 :029 > y = ['he','le','lo','mn']
 	=> ["he", "le", "lo", "mn"] 
	3.0.1 :030 > i = Hash[[x],[y]]
 	=> {[[1, 2, 3, 4]]=>[["he", "le", "lo", "mn"]]} 
	3.0.1 :031 > i = Hash[[6],["hello"]]
 	=> {[6]=>["hello"]} 
	3.0.1 :032 > i
 	=> {[6]=>["hello"]} 

4.try_convert(obj) -> obj, new hash , or nil

 -> if object is a hash, return obj.

	ex - 3.0.1 :033 > i
 	=> {[6]=>["hello"]} 
	3.0.1 :035 > Hash.try_convert(i)
 	=> {[6]=>["hello"]} 
 -> if obj responds to :to_hash calls obj.to_has and returns the result.

 -> Returns nil if obj not respond to :to_hash

 	ex - 3.0.1 :040 > m = "Hello"
	 => "Hello" 
	3.0.1 :041 > Hash.try_convert(m)
 	=> nil 

2.Public class methods 

1.hash<otherHash -> return true if hash is a proper subset of other hash otherwise return false

	ex- 3.0.1 :045 > animals
 	=> {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :046 > ani = {:tall=> "giraffe"}
 	=> {:tall=>"giraffe"} 
	3.0.1 :047 > animals<ani
	 => false 
	3.0.1 :048 > ani
 	=> {:tall=>"giraffe"} 
	3.0.1 :049 > animals
	 => {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :050 > ani<animals
 	=> true 

2.hash<=otherHash -> return true if hash is a subset of otherHash ,otherwise false

	ex - 3.0.1 :053 > animals<ani
 	=> false 
	3.0.1 :054 > animals<=ani
	 => false 
	3.0.1 :055 > ani<=animals
	 => true 
	3.0.1 :056 > ani<ani
	 => false 
	3.0.1 :057 > ani<=ani
 	=> true 

3.hash==object -> return true if the following are true

	>object is a hash object.
	>hash and other object have the same keys (regardless of order in hash).
	>for each key in hash and object are equal hash[key] == object[key]
	>otherwise returns false.

	ex-  => {:minute=>"kitten", :tall=>"giraffe"} 
	3.0.1 :061 > animals == mals
	 => true 
	3.0.1 :062 > animals
	 => {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :063 > mals
	 => {:minute=>"kitten", :tall=>"giraffe"} 
	3.0.1 :064 > animals == mals
 	=> true 
	3.0.1 :064 > animals == mals
 	=> true 
	3.0.1 :065 > ani
 	=> {:tall=>"giraffe"} 
	3.0.1 :066 > animals == ani
 	=> false 

4.hash[key] -> return the value associated with the given key, if found.

	ex - 3.0.1 :067 > animals
 	=> {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :068 > animals[:tall]
 	=> "giraffe" 
	3.0.1 :069 > color
 	=> 
	{"Rose"=>"red",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :070 > color["Rose"]
 	=> "red" 

5.hash[key] = value -> if the given key exists, replace its value with the given value; the ordering is not affected.

	ex - 3.0.1 :071 > color
 	=> 
	{"Rose"=>"red",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :072 > color["Rose"] = "mango"
	 => "mango" 
	3.0.1 :073 > color
 	=> 
	{"Rose"=>"mango",
	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 

6..store -> replace the value of that key with given value

	ex -  => {:tall=>"giraffe"} 
	3.0.1 :075 > ani.store(:tall, "good")
	=> "good" 
	3.0.1 :076 > ani
 	=> {:tall=>"good"} 

7.any? -> return true if any element statisfies a given criterion; otherwise false.

	ex -  => {:tall=>"giraffe", :minute=>"kitten"} 
	3.0.1 :078 > animals.any?([:tall,"giraffe"])
	 => true 
	3.0.1 :079 > animals.any?([:tall,"kitten"])
	 => false 
	3.0.1 :080 > animals.any?(["tll","kitten"])
 	=> false 

8.assoc(key) -> this method return a two elements array containing that key and its value if that key is in that hash.

	ex - 3.0.1 :081 > color
 	=> 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :082 > color.assoc("Rose")
 	=> ["Rose", "mango"] 
	3.0.1 :083 > color.assoc("Lily")
 	=> ["Lily", "purple"] 

9.clear -> this method remove all hash entries and return self.

	ex - 3.0.1 :084 > ani 
 	=> {:tall=>"good"} 
	3.0.1 :085 > ani.clear
	 => {} 
	3.0.1 :086 > ani
 	=> {} 
	.0.1 :08

10.compact -> this method return a copy of self after removing all nil valued associated with the key

	ex - 3.0.1 :086 > ani
 	=> {} 
	3.0.1 :087 > ani = {1=>"he", 2=>nil, 3=>"me", 4=> nil, 5=>nil}
 	=> {1=>"he", 2=>nil, 3=>"me", 4=>nil, 5=>nil} 
	3.0.1 :088 > ani.compact
 	=> {1=>"he", 3=>"me"} 

11.compact! -> this method completely remove nil value in place and return self.

	ex - 3.0.1 :087 > ani = {1=>"he", 2=>nil, 3=>"me", 4=> nil, 5=>nil}
	 => {1=>"he", 2=>nil, 3=>"me", 4=>nil, 5=>nil} 
	3.0.1 :088 > ani.compact
 	=> {1=>"he", 3=>"me"} 
	3.0.1 :089 > ani
	 => {1=>"he", 2=>nil, 3=>"me", 4=>nil, 5=>nil} 
	3.0.1 :090 > ani.compact!
	 => {1=>"he", 3=>"me"} 
	3.0.1 :091 > ani
 	=> {1=>"he", 3=>"me"}  

12.delete(key) -> delete the entry for the given key and returns its associated value

	ex - 3.0.1 :091 > ani
 	=> {1=>"he", 3=>"me"} 
	3.0.1 :092 > ani.delete(3)
 	=> "me" 
	3.0.1 :093 > ani
 	=> {1=>"he"} 
	3.0.1 :094 > 
13.empty> -> return true if hash contains no key value pair otherwise false.

	ex - 3.0.1 :093 > ani
 	=> {1=>"he"} 
	3.0.1 :094 > ani.empty?
	 => false 
	3.0.1 :095 > ani.clear
	 => {} 
	3.0.1 :096 > ani.empty?
	 => true 
14.include?(key) -> return true if given key is present in hash 

	ex - 3.0.1 :097 > color
	 => 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :098 > color.include?("Rose")
	 => true 
	3.0.1 :099 > color.include?("helloe")
 	=> false 

15.to_s -> return content of hash as string

	ex -  => false 
	3.0.1 :100 > color
 	=> 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :101 > color.to_s
 	=> "{\"Rose\"=>\"mango\", \"Lily\"=>\"purple\", \"Marigold\"=>\"Blue\", 			\"Jasmine\"=>\"white\", \"Tulip\"=>\"pink\"}" 

16.to_a -> return an array of 2-elements 

	ex - 3.0.1 :103 > color.to_a
 	=> 
[	["Rose", "mango"],
	["Lily", "purple"],
 	["Marigold", "Blue"],
 	["Jasmine", "white"],
 	["Tulip", "pink"]]

17.slice(keys) -> return a new hash object containing the entries for the given keys

	ex - 3.0.1 :107 > color
 	=> 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :108 > color.slice("Rose", "Lily")
 	=> {"Rose"=>"mango", "Lily"=>"purple"}  

18.size -> Returns the count of entries in hash.

	 ex - 3.0.1 :110 > color
	=> 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :111 > color.size
 	=> 5 

19.shift -> removes the first hash entry, returns a 2-elements array containing the removed key and value.

	ex - 3.0.1 :110 > color
 	=> 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :111 > color.size
	 => 5 
	3.0.1 :112 > color.shift
 	=> ["Rose", "mango"] 
	3.0.1 :113 > color
	 => {"Lily"=>"purple", "Marigold"=>"Blue", "Jasmine"=>"white", "Tulip"=>"pink"}

20.inspect -> returns a new string containing the hash entires.

	 ex - 3.0.1 :114 > color.inspect
 	=> "{\"Lily\"=>\"purple\", \"Marigold\"=>\"Blue\", \"Jasmine\"=>\"white\", 		\"Tulip\"=>\"pink\"}" 
	3.0.1 :115 > animals.inspect
 	=> "{:tall=>\"giraffe\", :minute=>\"kitten\"}" 

21/replace(other_has) -> replace the entire contents of self with the contents of other hash 

	ex - 3.0.1 :119 > color.replace({"Rose"=>"he"})
 	=> {"Rose"=>"he"} 
	3.0.1 :120 > color
 	=> {"Rose"=>"he"} 
	3.0.1 :122 > ani = {b:"el", q:"ye"}
	 => {:b=>"el", :q=>"ye"} 
	3.0.1 :123 > ani.replace(color)
	 => {"Rose"=>"he"} 
	3.0.1 :124 > ani
	 => {"Rose"=>"he"} 

22.invert -> returns a new hash object with the each key-value pair inverted

	ex - 3.0.1 :124 > ani
	 => {"Rose"=>"he"} 
	3.0.1 :125 > ani.invert
 	=> {"he"=>"Rose"} 
	3.0.1 :126 > ani

23.has_value?(value) -> return true if value is a value in self otherwise return false.

	ex - 3.0.1 :130 > ani
	 => {"Rose"=>"he"} 
	3.0.1 :131 > ani.has_value?("he")
	 => true 
	3.0.1 :132 > ani.has_value?("h")
 	=> false 

24.has_key?(key)-> Returns true if key in a member of self, else false

	ex - 3.0.1 :134 > ani
	 => {"Rose"=>"he"} 
	3.0.1 :135 > ani.key?("Rose")
	 => true 
	3.0.1 :136 > ani.key?("Ros")
 	=> false 

25.flatten -> Returns a new Array object that is of one-dimensional

	ex - 3.0.1 :144 > color
 => 
	{"Rose"=>"mango",
 	"Lily"=>"purple",
 	"Marigold"=>"Blue",
 	"Jasmine"=>"white",
 	"Tulip"=>"pink"} 
	3.0.1 :145 > color.flatten
 	=> 
	["Rose",
 	"mango",
 	"Lily",
 	"purple",
 	"Marigold",
 	"Blue",
 	"Jasmine",
 	"white",
 	"Tulip",
 	"pink"] 

26.select -> return self, whose entries are satisfied by the block

	ex - 3.0.1 :152 > color.select 
 	=> #<Enumerator: ...> 
	3.0.1 :153 > color.select {|key,value| value == "mango"}
 	=> {"Rose"=>"mango"} 
	3.0.1 :154 > color.select {|key,value| value == "Blue"}
 	=> {"Marigold"=>"Blue"} 

27.fetch_vlaues(key) -> return a new array containing the values associated with given keys

	ex - 3.0.1 :155 > color.fetch_values("Rose")
	 => ["mango"] 
	3.0.1 :156 > color.fetch_values("Lily")
	 => ["purple"] 
	3.0.1 :157 > color.fetch_values("Tulip")
	 => ["pink"] 

28.fetch_values(key) with enumerate function -> 

	ex - 3.0.1 :163 > helo.fetch_values(:vr){|key| key.to_s}
 	=> ["vr"] 

29.eql?object -> return true if
	-> object is a hash object .
	->hash and object have the same keys
	->for each key key, h[key] eql? object[key]
	->otherwise, return false.

	ex - 3.0.1 :168 > m = {"he"=>2,"h"=>3}
 	=> {"he"=>2, "h"=>3} 
	3.0.1 :169 > color.eql? m
 	=> false 
	3.0.1 :170 > color.eql? color
 	=> true 

30.each_value-> enumerate 

	ex - 3.0.1 :173 > color.each_value{|value| puts value}
	mango
	purple
	Blue
	white
	pink
 	=> 

31.dig(key, identifiers) -> finds and returns the object in nested object 

	ex - 3.0.1 :175 > hm.dig(:ol)
 	=> {:ar=>{:sa=>2}} 
32.values_at(key) -> returns a new array containing values for the given keys.

	ex - 3.0.1 :176 > color.values_at("Rose","Lily")
	 => ["mango", "purple"]