Array -> Array is a collectios of elements put together inside a container.

	-> it's an ordered, integer-indexed collections of any object 

	-> it can hold an object like string, integer, float, hash, symbol, and other ruby 	object 


How to create an array in ruby 

	-> name_of_aray = Array.new

	ex-3.0.1 :197 > c = Array.new
 	=> [] 
	3.0.1 :198 > c.class
	 => Array 

	-> you can also set the length of an array at time of creating an array
	   name_of_array = Array.new(15)

	ex- 3.0.1 :200 > af = Array.new(12)
 	=> [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil] 
	->name_of_array = []

	ex - 3.0.1 :195 > ab =[]
	=> [] 
	3.0.1 :196 > ab.class
	 => Array 

To check the length of an Array

1. Length -> it will give you the size of an array
	ex-3.0.1 :202 > af.length
 => 12 
		
2. Size -> it will give you the size of an array 

	ex-3.0.1 :201 > af.size
 	=> 12 


Indexing in an array
	-> in Ruby array array elements strat with zero index from right side 
	-> But if start from left side it start with negative index "-1"


	ex - 3.0.1 :204 > a = ["sam", "man", "can","lan","wan"]
	 => ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :205 > a[0]
	 => "sam" 
	3.0.1 :206 > a[4]
 	=> "wan" 
	3.0.1 :207 > a[9]
	 => nil 
	3.0.1 :208 > a[-1]
	 => "wan" 
	3.0.1 :209 > a[-5]
	 => "sam" 

   -> we can also access a range of elements from an array 

	 ex - 3.0.1 :210 > a[0,3]
	 => ["sam", "man", "can"] 
	3.0.1 :211 > a[2,5]
	 => ["can", "lan", "wan"] 
	3.0.1 :212 > a[-1,-4]
	 => nil 
	3.0.1 :213 > a[-4,5]
 	=> ["man", "can", "lan", "wan"] 
  Note- it start with accessing from first arguments index but not include the index of 	last arguments 

METHODS IN ARRAY

1.first -> the first method access the first element of the array, the element at index 0.

	ex - 3.0.1 :215 > a
	 => ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :216 > a.first
	 => "sam" 
	3.0.1 :217 > a[0]
 	=> "sam" 

2.last ->the last method accesses the last element of the array 

	ex -  => ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :219 > a.last
	 => "wan" 

3.take -> the take method returns the first n elements of the array

	ex- 3.0.1 :220 > a
 	=> ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :221 > a.take(4)
	 => ["sam", "man", "can", "lan"] 
	3.0.1 :222 > a.take(2)
	 => ["sam", "man"] 
	3.0.1 :223 > a.take(5)
 	=> ["sam", "man", "can", "lan", "wan"] 

4.drop -> the drop method returns the elements after n elements of the array 

	ex - 3.0.1 :224 > a
	 => ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :225 > a.drop(3)
	 => ["lan", "wan"] 
	3.0.1 :226 > a.drop(2)
 	=> ["can", "lan", "wan"] 

5.pop -> the pop method will permanently remove the last elements of an array

	ex - 3.0.1 :227 > a
 	=> ["sam", "man", "can", "lan", "wan"] 
	3.0.1 :228 > a.pop
 	=> "wan" 
	3.0.1 :229 > a.pop
 	=> "lan" 
	3.0.1 :231 > a
 	=> ["sam", "man", "can"] 

6.shift -> the shift method will permantently remove the first element of an array and 	
	return this element 

	ex - 3.0.1 :231 > a
 	=> ["sam", "man", "can"] 
	3.0.1 :232 > a.shift
	 => "sam" 
	3.0.1 :233 > a.shift
	 => "man" 
	3.0.1 :234 > a
 	=> ["can"] 

7.push -> the push method will allow you to add an element to the end of an array

	ex - 3.0.1 :234 > a
	 => ["can"] 
	3.0.1 :235 > a.push("sam")
	 => ["can", "sam"] 
	3.0.1 :236 > a.push("man")
	 => ["can", "sam", "man"] 
	3.0.1 :237 > a.push("lan")
	 => ["can", "sam", "man", "lan"] 
	3.0.1 :238 > a
 	=> ["can", "sam", "man", "lan"] 

8.unshift -> the unshift method will allow you to add an element to the beginning of an array

	ex - 3.0.1 :238 > a
	 => ["can", "sam", "man", "lan"] 
	3.0.1 :239 > a.unshift("first")
	 => ["first", "can", "sam", "man", "lan"] 
	3.0.1 :240 > a.unshift("again first")
	 => ["again first", "first", "can", "sam", "man", "lan"] 
	3.0.1 :241 > a
	=> ["again first", "first", "can", "sam", "man", "lan"] 

9.delete -> the delete method remove a specified element from an array permanently

	ex - 3.0.1 :241 > a
	 => ["again first", "first", "can", "sam", "man", "lan"] 
	3.0.1 :242 > a.delete("can")
	 => "can" 
	3.0.1 :243 > a
	 => ["again first", "first", "sam", "man", "lan"] 
	3.0.1 :244 > a.delete("again first")
	 => "again first" 
	3.0.1 :245 > a
	=> ["first", "sam", "man", "lan"] 

10.delete_at -> the delete_at method allows you to permanently remove an element of an array 	at a specified index

	ex - 3.0.1 :245 > a
 	=> ["first", "sam", "man", "lan"] 
	3.0.1 :246 > a.delete_at(1)
	 => "sam" 
	3.0.1 :247 > a.delete_at(4)
 	=> nil 
	3.0.1 :248 > a.delete_at(3)
	 => nil 
	3.0.1 :249 > a.delete_at(2)
	 => "lan" 
	3.0.1 :250 > a
	 => ["first", "man"] 
	3.0.1 :251 > 

11.reverse -> The .reverse method reverses the array but does not mutate it (the original 	array stays as is)

	ex - 3.0.1 :252 > a
	 => ["first", "man"] 
	3.0.1 :253 > a.unshift("sam")
	 => ["sam", "first", "man"] 
	3.0.1 :254 > a.push("ham")
	 => ["sam", "first", "man", "ham"] 
	3.0.1 :255 > a
	 => ["sam", "first", "man", "ham"] 
	3.0.1 :256 > a.reverse
	 => ["ham", "man", "first", "sam"] 
	3.0.1 :257 > a
	 => ["sam", "first", "man", "ham"] 
	3.0.1 :258 > a.revers
	3.0.1 :259 > a.reverse
 	=> ["ham", "man", "first", "sam"] 

12.include? ->  the include method checks to see if the argument given is included in the array

	ex - 3.0.1 :260 > a.include?"sa"
	 => false 
	3.0.1 :261 > a.include?"sam"
	 => true 

13.join -> the join method returns a string of all the elements of the array separated by a 	separator parameter. if the separator parameter is nil, the method uses an empty 	string as separator between strings. 

	ex - 3.0.1 :262 > a
	 => ["sam", "first", "man", "ham"] 
	3.0.1 :263 > a.join
	 => "samfirstmanham" 
	3.0.1 :265 > a.join('&')
 	=> "sam&first&man&ham" 
	3.0.1 :266 > a.join('%')
	 => "sam%first%man%ham" 
14.each -> the each method iterates over each element of the array , allowing you to perform 	actions no them.

	ex - 3.0.1 :267 > a.each do |name|
	3.0.1 :268 >   puts name
	3.0.1 :269 > end
	sam
	first
	man
	ham
 	=> ["sam", "first", "man", "ham"] 

15.uniq -> the uniq methods takes in an array containing duplicate elements, and returns a 	copy of the array containing only unique elements, any duplicate elements are removed 	from the array.

	ex - 3.0.1 :270 > b = ['a','s','d','a','f','s','g','f']
	 => ["a", "s", "d", "a", "f", "s", "g", "f"] 
	3.0.1 :271 > b.uniq
 	=> ["a", "s", "d", "f", "g"] 

16.concat -> the .concat method appends the elements from an array to the original array. 	the .concat method can take in multiple arrays as an argument, which will in turn 	append multiple arrays to the original array.

	ex - 3.0.1 :274 > a.concat(["he","oo"],["ki","li"])
	 => ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 
	3.0.1 :275 > a
 	=> ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 

17.sort -> this method will sort an array alphabatically and gives us back

	ex - 3.0.1 :276 > a
	 => ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 
	3.0.1 :278 > a.sort
	 => ["first", "ham", "he", "ki", "li", "man", "oo", "sam"] 

18.count -> this method will count the total number of elements inside an array

	ex - 3.0.1 :279 > a
	 => ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 
	3.0.1 :280 > a.count
 	=> 8 

19.empty? -> this method is used to check whether array has element or not, this method 	return true or false

	ex - 3.0.1 :281 > a
 	=> ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 
	3.0.1 :282 > a.empty?
	 => false 
	3.0.1 :283 > g = []
	 => [] 
	3.0.1 :284 > g.empty?
	 => true 

20. << -> this is used to add element inside an array at the end

	ex - 3.0.1 :285 > a
	 => ["sam", "first", "man", "ham", "he", "oo", "ki", "li"] 
	3.0.1 :286 > a << "add"
	 => ["sam", "first", "man", "ham", "he", "oo", "ki", "li", "add"] 
	3.0.1 :287 > a << "again"
 	=> ["sam", "first", "man", "ham", "he", "oo", "ki", "li", "add", "again"] 


21.insert -> this method is used to add multiple elements at any position 

	ex - 3.0.1 :288 > a = [1,2,3,4,5,"hi","ki","gu"]
	 => [1, 2, 3, 4, 5, "hi", "ki", "gu"] 
	3.0.1 :289 > a.insert(3,"hello")
	 => [1, 2, 3, "hello", 4, 5, "hi", "ki", "gu"] 
	3.0.1 :290 > a.insert(5,"hello",4,8,10)
	 => [1, 2, 3, "hello", 4, "hello", 4, 8, 10, 5, "hi", "ki", "gu"] 

22.compact -> this method is used to remove nil elements from an array

	ex - 3.0.1 :291 > a = Array.new
	 => [] 
	3.0.1 :292 > a[1]= "sam"
	 => "sam" 
	3.0.1 :293 > a[5] = 8
	 => 8 
	3.0.1 :294 > a
 	=> [nil, "sam", nil, nil, nil, 8] 
	3.0.1 :295 > a.compact
 	=> ["sam", 8] 

23.compact! -> this will remove will elements permeantlly form an array

	ex - 3.0.1 :291 > a = Array.new
	 => [] 
	3.0.1 :292 > a[1]= "sam"
	 => "sam" 
	3.0.1 :293 > a[5] = 8
	 => 8 
	3.0.1 :294 > a
	 => [nil, "sam", nil, nil, nil, 8] 
	3.0.1 :295 > a.compact
	 => ["sam", 8] 
	3.0.1 :296 > a
	 => [nil, "sam", nil, nil, nil, 8] 
	3.0.1 :297 > a.compact!
	 => ["sam", 8] 
	 :298 > a
	 => ["sam", 8] 

24.flatten -> the flatter method is used to take an array that contains nested arrays and 	create a one dimensional array

	ex - 3.0.1 :299 > a = [1,2,3,[12,14,15,44],["hp","lo"]]
 	=> [1, 2, 3, [12, 14, 15, 44], ["hp", "lo"]] 
	3.0.1 :300 > a.flatten
	=> [1, 2, 3, 12, 14, 15, 44, "hp", "lo"] 

25.product -> the product method can be used to combine two array in an interesting way.it 	returns an array that is a combination of all elements from all arrays.

	ex - 3.0.1 :301 > a = [1,2,3,5]
	 => [1, 2, 3, 5] 
	3.0.1 :302 > b = [7,8,9,4]
	 => [7, 8, 9, 4] 
	3.0.1 :303 > a.product(b)
	 => 
	 [[1, 7],
	 [1, 8],
	 [1, 9],
	 [1, 4],
	 [2, 7],
	 [2, 8],
	 [2, 9],
	 [2, 4],
	 [3, 7],
	 [3, 8],
	 [3, 9],
	 [3, 4],
	 [5, 7],
	 [5, 8],
	 [5, 9],
	 [5, 4]] 

26.sample -> this method is use to grab a random answer from an array 

	ex - 3.0.1 :304 > a
 	=> [1, 2, 3, 5] 
	3.0.1 :305 > a.sample
	 => 5 
	3.0.1 :306 > a.sample
	 => 2 
	3.0.1 :307 > a.sample
	 => 5 
	3.0.1 :308 > a.sample
 	=> 5 

27.shuffle -> this method will shuffle the elements inside the array

	ex - 3.0.1 :309 > a
	 => [1, 2, 3, 5] 
	3.0.1 :310 > a.shuffle
	 => [5, 2, 1, 3] 
	3.0.1 :311 > a.shuffle
	 => [3, 2, 5, 1] 
	3.0.1 :312 > 

28.zip -> This generates a sequence of ary.size n-elements of self with corresponding elements form each argument.


-> it combine every row to row element and put in a separate array of self array element,
if one or more array size in not equal to other it take a value of nil


	ex - 3.0.1 :058 > a = [ 4, 5, 6 ]
	=> [4, 5, 6] 
	3.0.1 :059 > b = [ 7, 8, 9 ]
	 => [7, 8, 9] 
	3.0.1 :060 > [1, 2, 3].zip(a, b)   
	 => [[1, 4, 7], [2, 5, 8], [3, 6, 9]]  
	3.0.1 :061 > a = [ 4, 5, 6 ]
	 => [4, 5, 6] 
	3.0.1 :062 > b = [ 7, 8]
	 => [7, 8] 
	3.0.1 :063 > [1, 2, 3].zip(a, b)   
	 => [[1, 4, 7], [2, 5, 8], [3, 6, nil]] 


29.values_at -> this will give you a value form an array at specified position 
	-> the selector may either be indices or ranges
	-> if indices or ranges is out of range it give a nil value

	ex - 3.0.1 :064 > a = ['hello','wolf','holf','cold','mold']
	 => ["hello", "wolf", "holf", "cold", "mold"] 
	3.0.1 :065 > a.values_at(1,4,3,5)
	 => ["wolf", "mold", "cold", nil] 

30.union (other_array, other_array2,....) -> returns a new array by joining other array with self, excluding any duplicates and preserving the order from the given arrays.

	ex -  => ["wolf", "mold", "cold", nil] 
	3.0.1 :066 > a
	 => ["hello", "wolf", "holf", "cold", "mold"] 
	3.0.1 :067 > b = ["hello", "sam","suja","mold","gold"]
	 => ["hello", "sam", "suja", "mold", "gold"] 
	3.0.1 :068 > c = ["Aman","sam","mold","honey"]
	 => ["Aman", "sam", "mold", "honey"] 
	3.0.1 :071 > a.union(b,c)
	 => 
	["hello",
	 "wolf",
	 "holf",
	 "cold",
	 "mold",
	 "sam",
	 "suja",
	 "gold",
	 "Aman",
	 "honey"]

31.transpose -> this method gives a new array by transpose the rows and coloumns.

	ex. - 3.0.1 :076 > e = a = [[1,2], [3,4], [5,6]]
	 => [[1, 2], [3, 4], [5, 6]] 
	3.0.1 :077 > e.transpose
	 => [[1, 3, 5], [2, 4, 6]] 

32.sum -> Returns the sum of elements. 

	ex - 3.0.1 :078 > f = [1,2,33,34,5,12]
	 => [1, 2, 33, 34, 5, 12] 
	3.0.1 :079 > f.sum
	 => 87 

33.sort! -> sort the array alphabetically at same place

	ex - 3.0.1 :080 > g = ['a','g','e','b','q']
	 => ["a", "g", "e", "b", "q"] 
	3.0.1 :081 > g.sort!
	 => ["a", "b", "e", "g", "q"] 
	3.0.1 :082 > g

34.slice(index) -> this will give you obj if at that index element is present if not nil.

	ex - 3.0.1 :084 > b
	 => ["hello", "sam", "suja", "mold", "gold"] 
	3.0.1 :085 > b.slice(4)
	 => "gold" 
	3.0.1 :086 > b.slice(2)
	 => "suja" 
	3.0.1 :087 > b.slice(6)
	=> nil 

35.slice(start, length) -> this will give you obj from start to the length, if length goes out of length of array return nil


	ex - 3.0.1 :090 > b.slice(1,3)
	 => ["sam", "suja", "mold"] 
	3.0.1 :091 > b.slice(1,4)
	 => ["sam", "suja", "mold", "gold"] 
	3.0.1 :092 > 
	3.0.1 :092 > b.slice(6,10)
	 => nil 

36.size() -> this will give you the size of an array

	ex - 3.0.1 :093 > a.size
	 => 3 
	3.0.1 :094 > b.size
	 => 5 
	3.0.1 :095 > c.size
	 => 4 

37.shuffle! -> this will give you shuffles elements in self in place

	ex - 3.0.1 :096 > b
	 => ["hello", "sam", "suja", "mold", "gold"] 
	3.0.1 :097 > c
	 => ["Aman", "sam", "mold", "honey"] 
	3.0.1 :098 > b.shuffle!
	 => ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :099 > b
	 => ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :100 > c.shuffle!
	 => ["mold", "Aman", "sam", "honey"] 
	3.0.1 :101 > c
 	=> ["mold", "Aman", "sam", "honey"] 

38.shift(n) -> if a number n is given, returns an array of the first n elements(or less) just like array.slice!(0,) does.

	ex - 3.0.1 :101 > c
	 => ["mold", "Aman", "sam", "honey"] 
	3.0.1 :102 > c.shift(3)
	 => ["mold", "Aman", "sam"] 
	3.0.1 :103 > c.shift(5)
	 => ["honey"] 

39.select! -> enumerator it act like enumerator

	ex - 3.0.1 :110 > b
	 => ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :111 > b.select{|val| val}
	 => ["gold", "sam", "mold", "suja", "hello"] 

40.rotate(count=1) -> returns a new array by rotating self so that the element at count is the first element of the new array.


	-> if count is negative then it rotates n the opposite direction, starting from 	the end of self where 1 is the last element.


	ex - 3.0.1 :112 > b
	 => ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :113 > b.rotate
	 => ["sam", "mold", "suja", "hello", "gold"] 
	3.0.1 :114 > b.rotate
	 => ["sam", "mold", "suja", "hello", "gold"] 
	3.0.1 :115 > b.rotate(2)
 	=> ["mold", "suja", "hello", "gold", "sam"] 

41.rindex(obj) -> Return the index of the last object in self==to obj

	ex - 3.0.1 :119 > b
 	=> ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :116 > b.rindex("hello")
	 => 4 
	3.0.1 :117 > b.rindex("sam")
	 => 1 
	3.0.1 :118 > b.rindex("gold")
	 => 0 

42.reverse_each -> same as each

	ex - 3.0.1 :121 > b.reverse_each
 	=> #<Enumerator: ...> 
	3.0.1 :122 > b.reverse_each{|x| print x," "}
	hello suja mold sam gold  => ["gold", "sam", "mold", "suja", "hello"] 


43.reverse! -> reverse self in place

	ex - 3.0.1 :124 > b
 	=> ["gold", "sam", "mold", "suja", "hello"] 
	3.0.1 :125 > b.reverse
 	=> ["hello", "suja", "mold", "sam", "gold"] 
	3.0.1 :127 > b.reverse!
	 => ["hello", "suja", "mold", "sam", "gold"] 
	3.0.1 :128 > b
 	=> ["hello", "suja", "mold", "sam", "gold"] 

44.replace(other_array) -> replaces the contents of self with the contents of other_ary, it increase the size of array of decrease if necessary.


	ex -> 3.0.1 :134 > f
	 => [1, 2, 33, 34, 5, 12] 
	3.0.1 :135 > f.replace(["hello","world"])
 	=> ["hello", "world"] 
	3.0.1 :136 > f
	 => ["hello", "world"] 

45.intersection(other_ary1, other_ary2) -> returns a new array containing unique elements common to self and other_arys. order is preserved from the original array.

	ex - 3.0.1 :137 > ary1 = [1,2,4,5,6,33]
	 => [1, 2, 4, 5, 6, 33] 
	3.0.1 :138 > ary2 = [1,25,66,43,2]
 	=> [1, 25, 66, 43, 2] 
	3.0.1 :139 > ary3 = [45,21,6,4]
	 => [45, 21, 6, 4] 
	3.0.1 :140 > ary1.intersection(ary2,ary3)
	 => [] 
	3.0.1 :141 > ary1.intersection([1,3,4])
	 => [1, 4] 
	3.0.1 :142 > ary1.intersection(ary2,ary3)
	 => [] 
	3.0.1 :143 > ary1.intersection(ary2)
	 => [1, 2]

46.each -> this method calls the given block once for each element in self, passing that element as a parameter. returns the array itself

	ex - 3.0.1 :145 > b
	=> ["hello", "suja", "mold", "sam", "gold"] 
	3.0.1 :146 > b.each
	=> #<Enumerator: ...> 
	3.0.1 :147 > b.each{|x| print x, "^"}
	hello^suja^mold^sam^gold^ => ["hello", "suja", "mold", "sam", "gold"]

47.each_index -> this method is same as each but each gives us a value and each_index gives us a index 

	ex - 3.0.1 :150 > b
 	=> ["hello", "suja", "mold", "sam", "gold"] 
	3.0.1 :151 > b.each_index
 	=> #<Enumerator: ...> 
	3.0.1 :152 > b.each_index{|x| puts "Something different #{x}"}
	Something different 0
	Something different 1
	Something different 2
	Something different 3
	Something different 4
	 => ["hello", "suja", "mold", "sam", "gold"]  

48.drop_while -> drops elements upto, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.

	ex - 3.0.1 :160 > h = [1,2,3,4,5,6,7,8]
 	=> [1, 2, 3, 4, 5, 6, 7, 8] 
	3.0.1 :164 > h.drop_while{|i| i<3}
 	=> [3, 4, 5, 6, 7, 8] 

49.delete_if -> deletes every elements of self for which block evaluates to true.

	ex - 3.0.1 :165 > b
 	=> ["hello", "suja", "mold", "sam", "gold"] 
	3.0.1 :166 > b.delete_if{|x| x=="gold"}
 	=> ["hello", "suja", "mold", "sam"] 
	3.0.1 :167 > h
	 => [1, 2, 3, 4, 5, 6, 7, 8] 
	3.0.1 :168 > h.delete_if{|x| x<=4}
 	=> [5, 6, 7, 8] 

50.cycle(n) -> call the object for each element n times or forever if nil is given 

	-> does nothing if a non-positive number is given or the array is empty.
	-> Returns nil if the loop has finished without getting interrupted.
	-> if no block is given, an enumerator is returned instead.


	ex - 3.0.1 :002 > h = [1,2,3,4,5,6]
	 => [1, 2, 3, 4, 5, 6] 
	3.0.1 :003 > h.cycle(2){|x| print x }
	123456123456 => nil 
	3.0.1 :004 > h.cycle(10){|x| print x }
	123456123456123456123456123456123456123456123456123456123456 => nil 


  NOTE - if you not provide the value of n it will count for forever

51.clear -> removes all elements from self.

	 ex - 3.0.1 :006 > a
	 => ["ehh", "ba", "cal", "ma"] 
	3.0.1 :007 > a.clear
	 => [] 
	3.0.1 :008 > a
	 => [] 

52.collect -> invoke the given block once for each element, create a new array containing the values returned by the block

	ex - 3.0.1 :009 > h
 	=> [1, 2, 3, 4, 5, 6] 
	3.0.1 :010 > h.collect{|y| puts y}
	1
	2
	3
	4
	5
	6
	 => [nil, nil, nil, nil, nil, nil] 
	3.0.1 :011 > h.collect{|y| y}
	 => [1, 2, 3, 4, 5, 6] 
	3.0.1 :014 > a = ["he","be","le","me"]
	 => ["he", "be", "le", "me"] 
	3.0.1 :015 > a.collect{|x| x +" "}
	 => ["he ", "be ", "le ", "me "]

 



