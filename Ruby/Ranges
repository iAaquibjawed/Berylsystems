Ranges -> Range is another class of Ruby.
	-> A range represents an interval - a set of values with a beginning and an end. 
	->Values of a range can be numbers, characters, strings or objects.
	->Ruby support ranges and allows us to use ranges in a variety of ways.

	1.Ranges as Sequences
	2.Ranges as Conditions
	3.Ranges as Intervals


1.Ranges as Sequences

-> it is of two types 

1.inclusive range -> in this the end value is included 

    How to create inclusive range

     -> it is constructed using start_point..end_points

	ex - 3.0.1 :028 > a = 1..10
 	=> 1..10 
	3.0.1 :029 > a.class
 	=> Range 

2.Exclusive range -> in this the end value is not included 

    How to create inclusive range

     -> it is constructed using start_point...end_points

	ex - 3.0.1 :030 > b = 1...10
 	=> 1...10 
	3.0.1 :031 > b.class
 	=> Range 

Methods of ranges


1.begin -> this method gives us the first no of the sequence 

	ex - 3.0.1 :032 > a
 	=> 1..10 
	3.0.1 :033 > a.begin
 	=> 1 

2.first -> this method also gives us the first no of the sequence 

	ex - 3.0.1 :034 > a
 	=> 1..10 
	3.0.1 :035 > a.first
 	=> 1 

3.end -> this method gives us the last no of the sequence 

	ex  3.0.1 :037 > b.end
 	=> 10 

4.last -> this method also gives us the last no of the sequence

	ex - 3.0.1 :038 > a
 	=> 1..10 
	3.0.1 :039 > a.last
 	=> 10 

5.[*range_name] -> this method gives us an array separated by a delimiter

	ex - 3.0.1 :040 > arr = [*a]
 	=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 

6.include?(obj)-> return true if obj is an element of the range, else otherwise.

	ex - 3.0.1 :044 > a
 	=> 1..10 
	3.0.1 :045 > a.include?2
	 => true 
	3.0.1 :046 > a.include?5
	 => true 
	3.0.1 :047 > a.include?18
	 => false 

7.max -> Return the maximum value in the range.

	ex - 3.0.1 :048 > a
 	=> 1..10 
	3.0.1 :049 > a.max
	 => 10 
	3.0.1 :050 > b
 	=> 1...10 
	3.0.1 :051 > b.max
 	=> 9 

8.min -> return the minus value in the range.

	ex - 3.0.1 :052 > a
 	=> 1..10 
	3.0.1 :053 > a.min
	 => 1 
	3.0.1 :054 > b
	 => 1...10 
	3.0.1 :055 > b.min
	=> 1 

9.size -> return the number of elements in the range.

	ex - 3.0.1 :056 > a
 	=> 1..10 
	3.0.1 :057 > a.size
	 => 10 
	3.0.1 :058 > b
 	=> 1...10 
	3.0.1 :059 > b.size
 	=> 9 

10.to_a -> Returns an array containing the items in the range.

	ex - 3.0.1 :060 > a
	 => 1..10 
	3.0.1 :061 > c = a.to_a
	 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
	3.0.1 :062 > d = b.to_a
	 => [1, 2, 3, 4, 5, 6, 7, 8, 9] 
	3.0.1 :063 > b
	 => 1...10 

11.to_s ->Convert this range object to a printable form (using to_s to convert the begin and end objects).

	ex - 3.0.1 :066 > m = a.to_s
 	=> "1..10" 
	3.0.1 :067 

12.exclude_end? -> Returns true if the range excludes its end value.

	ex - 3.0.1 :070 > a
 	=> 1..10 
	3.0.1 :071 > a.exclude_end?
 	=> false 
	3.0.1 :072 > b
	 => 1...10 
	3.0.1 :073 > b.exclude_end?
 	=> true 

13.each -> iterates over the elements of range, passing each in turn to the block

	ex - 3.0.1 :074 > a
 	=> 1..10 
	3.0.1 :075 > a.each{|x| x }
 	=> 1..10 
	3.0.1 :076 > a.each{|x| puts x }
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10
 	=> 1..10 
	3.0.1 :077 > b
	 => 1...10 
	3.0.1 :078 > b.each{|x| puts x }
	1
	2
	3
	4
	5
	6
	7
	8
	9
	 => 1...10 
	
