String

->it is a sequence of character, lines paragraphs, tab, whitespace, etc

We use either double quotes ("string") or single quotes ('string') to represent the string


STRING: CONCATENATION- adding one string with other 

1.By using "+" operator

3.0.1 :022 > x= "Ruby"
 => "Ruby" 
3.0.1 :023 > y= "String"
 => "String" 
3.0.1 :024 > x+" "+y
 => "Ruby String" 
3.0.1 :025 > 

2.Appending methods- Here we append one string to other by using two less than symbol"<<"
3.0.1 :025 > x
 => "Ruby" 
3.0.1 :026 > x<<" String"
 => "Ruby String" 
3.0.1 :027 > x
 => "Ruby String" 
3.0.1 :028 > 

STRING MULTIPLICATION - We use multiplication operator to get numbers of same string from that string

3.0.1 :028 > "Hello World "*3
 => "Hello World Hello World Hello World " 

METHODS IN STRING

1. to_s -> convert into string
3.0.1 :034 > x=3
 => 3 
3.0.1 :035 > x.class
 => Integer 
3.0.1 :036 > x= x.to_s
 => "3" 
3.0.1 :037 > x.class
 => String 

2.to_i -> convert to integer
3.0.1 :038 > m = "5"
 => "5" 
3.0.1 :039 > m.class
 => String 
3.0.1 :040 > m= m.to_i
 => 5 
3.0.1 :041 > m.class
 => Integer 

4. Reverse -> reverse the string
3.0.1 :042 > x= "Hello World"
 => "Hello World" 
3.0.1 :043 > x.reverse
 => "dlroW olleH" 

5.Capitalize -> Make first character of sting capital
3.0.1 :044 > x= "hello world"
 => "hello world" 
3.0.1 :045 > x.capitalize
 => "Hello world" 

6. Upcase -> Convert every character of string to uppercase
3.0.1 :046 > x.upcase
 => "HELLO WORLD" 
3.0.1 :047 > 

7.Downcase -> Make every character lowercase

3.0.1 :048 > x= "HELLO WORLD"
 => "HELLO WORLD" 
3.0.1 :049 > x.downcase
 => "hello world" 
3.0.1 :050 > 

8.Length -> Give you a total no of character in string
3.0.1 :050 > x.length
 => 11 

STRING ESCAPING
 	-> we either represent string with singe as well as double quotes
	   but there is a problem if we use single or double quotes inside the string

3.0.1 :053'> 'book's'
3.0.1 :054'> 
3.0.1 :055 > '
/Users/admin/.rvm/rubies/ruby-3.0.1/lib/ruby/3.0.0/irb/workspace.rb:116:in `eval': (irb):53: syntax error, unexpected local variable or method, expecting end-of-input (SyntaxError)
'book's'
      ^
	from /Users/admin/.rvm/rubies/ruby-3.0.1/lib/ruby/gems/3.0.0/gems/irb-1.3.5/exe/irb:11:in `<top (required)>'
	from /Users/admin/.rvm/rubies/ruby-3.0.1/bin/irb:23:in `load'
	from /Users/admin/.rvm/rubies/ruby-3.0.1/bin/irb:23:in `<main>'

-> To overcome this error we use escape character (\) backslash

3.0.1 :056 > 'book\'s'
 => "book's" 
3.0.1 :001 > "The \"Earth\""
 => "The \"Earth\"" 
3.0.1 :002 > 

STRING CONTROL CHARACTER ->  we use backslash to define special character

1.\t -> Tab
3.0.1 :004 > puts "Hello\tWorld"
Hello	World
 => nil 

2.\n -> New line
3.0.1 :005 > puts "Hello\nWorld"
Hello
World
 => nil 

Note- This special control character not work with single quote

STRING INTERPOLATION -> insert something of different nature inside something else.

3.0.1 :006 > x = " Hello "
 => " Hello " 
3.0.1 :007 > puts "#{x}World"
 Hello World
 => nil 

-> We can also perform some process inside this interpolation
3.0.1 :008 > puts "#{x.reverse}World"
 olleH World
 => nil 

Note- This interpolation can not work with single quote

SOME MORE METHODS IN STRING

1.Strip method-> it remove leading and trailing white space in string

	ex- 3.0.1 :001 > x ="     My name is Aaquib    "
	 => "     My name is Aaquib    " 
	3.0.1 :002 > x.strip
	 => "My name is Aaquib" 
	
	-> Use can also use string in place of x like
	3.0.1 :006 > "       My name is Aaquib           ".strip()
 	=> "My name is Aaquib" 

2.strip! -> this method remove leading and trailing whitespace from the object or nill if no any changes made 

	ex-3.0.1 :007 > "       My name is Aaquib           ".strip!()
 	=> "My name is Aaquib" 
	3.0.1 :008 > "My name is Aaquib".strip!()
 	=> nil 
	3.0.1 :009 > 

3.Index -> This will give you a integer index of the character you passed inside the parenthesis

	ex-3.0.1 :009 > x= "Hello"
	 => "Hello" 
	3.0.1 :010 > x.index("H")
	 => 0 

	-> 
4.include?-> This take a substring as argument and return true if that substring is present in the string else return false

	ex-3.0.1 :013 > x.include?"He"
 	=> true 
	3.0.1 :014 > x.include?"Hm"
 	=> false 

5.replace -> this take a string as argument and replace with the another string.
	ex- 3.0.1 :015 > x
 	=> "Hello" 
	3.0.1 :016 > x.replace "Replaced"
	 => "Replaced" 
	3.0.1 :017 > x
	 => "Replaced" 

6.insert -> this take two argument one is index at which string has to insert and the other is substring

	ex-3.0.1 :018 > x.insert(1, "new string")
 	=> "Rnew stringeplaced" 

7.lstrp -> this will remove the leading whitespace from string
 
	ex- 3.0.1 :019 > y = "       check        "
 	=> "       check        " 
	3.0.1 :021 > y.lstrip
 	=> "check        " 
8.rstrip -> this will remove the trailing whitespace from string

	ex-3.0.1 :022 > y = "       check        "
 	=> "       check        " 
	3.0.1 :023 > y.rstrip
	 => "       check" 
9.chr -> returns a one-character string at the beginning of the string

	ex-3.0.1 :024 > x= "Hello"
 	=> "Hello" 
	3.0.1 :025 > x.chr
 	=> "H" 
10.clear -> it make a string empty
	ex-3.0.1 :026 > x
	 => "Hello" 
	3.0.1 :027 > x.clear
	 => "" 
	3.0.1 :028 > x
	=> "" 

11.try_convert -> 
	-> If object is a String object, returns object.
	ex-3.0.1 :038 > x
	=> "Hello" 
	3.0.1 :039 > String.try_convert(x)
	 => "Hello" 
	3.0.1 :041 > String.try_convert(11)
	 => nil 
	3.0.1 :042 > x = 112
 	=> 112 

12.string*integer -> it give a new string contains integer copies 
	ex-3.0.1 :036 > "world "*3
 	=> "world world world " 

13.string <=> other_string ->
	-> 0 if other_string are equal

	ex- 3.0.1 :039 > "world"<=>"world"
	 => 0 

	->-1 if other_string is smaller

	ex-3.0.1 :045 > 'Hello' <=> 'Wor'
 	=> -1 

	-> 1 if other_string is larger

	ex-3.0.1 :046 > 'Hello' <=> 'Helllloooo'
	 => 1 

	-> nil if the two are incomparable 

	ex-3.0.1 :047 > 'Hello' <=> 3
 	=> nil 

14.string == object -> return true if object has the same length and content else false 

	ex-3.0.1 :048 > x= "Hello"
	 => "Hello" 
	3.0.1 :049 > y= "Hello"
	 => "Hello" 
	3.0.1 :050 > x==y
 	=> true 
	3.0.1 :051 > y = "helo"
	 => "helo" 
	3.0.1 :052 > x==y
 	=> false 

15.string =~ regex -> it take a substring and return the index of first substring else nil

	-> 3.0.1 :054 > x =~/H/
 	=> 0 
	3.0.1 :055 > x =~/Hell/
	3.0.1 :056 > x =~/Helloooo/
 	=> nil 
16.stirng[index]-> it give you a new substring or nil

	ex- 3.0.1 :058 > 'Hello' [1]
	 => "e" 
	3.0.1 :060 > x
 	=> "Hello" 
	3.0.1 :061 > x[0]
 	=> "H" 
Note-> if we give a negative value as index it start counting from end "start from -1"
	ex- => "H" 
	3.0.1 :062 > x[-2]
 	=> "l" 
Note-> if we pass an index out of range it return nil
	ex-3.0.1 :063 > x[8]
 	=> nil

17.center(width, padstr='') -> if width is greater than the length of string, retrurn a new string of length width with string centered and padded with pastor, otherwise, returns str

	ex-3.0.1 :066 > z.length
	 => 5 
	3.0.1 :072 > z.center(8)
 	=> " Hello  " 
	3.0.1 :073 > z.center(5)
	 => "Hello" 
	3.0.1 :074 > z.center(10,'123')
 	=> "12Hello123" 

18.delet_prefix -> it return copy of string with leading prefix deleted

	ex- 3.0.1 :078 > x ="Hello"
 	=> "Hello" 
	3.0.1 :079 > x.delete_prefix("Hel")
 	=> "lo" 
	3.0.1 :080 > x.delete_prefix("lo")
 	=> "Hello"
19.delete_suffix -> Delete trailing string from the string and return the copy of string

	ex- 3.0.1 :082 > x.delete_suffix("lo")
 	=> "Hel" 

20.empty? -> Used to check where string is or not
	-> return true if length is zero else false

	ex- 3.0.1 :086 > x
	 => "Hello" 
	3.0.1 :087 > x.empty?
	 => false 
	3.0.1 :088 > x = ""
	 => "" 
	3.0.1 :089 > x.empty?
	 => true 


21.match(pattern, offset=0) -> returns a matchdata object or nil based on self and the given pattern

	ex-3.0.1 :092 > x
 	=> "Hello" 
	3.0.1 :093 > x.match("H")
	 => #<MatchData "H"> 
	3.0.1 :094 > x.match("W")
	 => nil

 -> if integer argument offset is given, the search begins at index offset

	ex-3.0.1 :095 > x.match("H",1)
 	=> nil 
	3.0.1 :096 > x.match("H",0)
 	=> #<MatchData "H"> 

22.ord -> Return the integer ordinal of a one-character string.

	ex-3.0.1 :097 > "a".ord
 	=> 97 
	3.0.1 :098 > "A".ord
 	=> 65 

23.string[range]-> it return a sub string of range length

	ex-3.0.1 :099 > x = "Hello World"
 	=> "Hello World" 
	3.0.1 :100 > x[0, 6]
	 => "Hello " 
	3.0.1 :101 > x[2,9]
	 => "llo World" 

24.slice -> Deletes the specified portion from string, and returns the deleted portion.

	ex- 3.0.1 :102 > x = "slice the text accordingly"
	 => "slice the text accordingly" 
	3.0.1 :103 > x.slice!(6)
	 => "t" 
	3.0.1 :104 > x.slice!(6...12)
	 => "he tex" 
	3.0.1 :106 > x
	 => "slice t accordingly" 
	3.0.1 :107 > x.slice!("the")
	 => nil 
	3.0.1 :108 > x
	 => "slice t accordingly" 
	3.0.1 :109 > x.slice!("s")
 	=> "s" 
	3.0.1 :110 > x
 	=> "lice t accordingly" 
25.split(pattern=nil, [limit]) -> if pattern is string its contents are used as the delimiter(seprator) when splitting string. if pattern is white space string split on white space, with leading and trailing whitespace runs of contagious white space character ignored

	ex- 3.0.1 :111 > x = "Let's practice with split"
 	=> "Let's practice with split" 
	3.0.1 :112 > x.split(" ")
	 => ["Let's", "practice", "with", "split"] 
	3.0.1 :113 > x.split("a")
	 => ["Let's pr", "ctice with split"] 
	3.0.1 :114 > x.split("z")
	 => ["Let's practice with split"] 
	3.0.1 :115 > x.split("m")
	 => ["Let's practice with split"] 
	3.0.1 :117 > x = "1,2,3,4,5,6,7,,,,,"
	 => "1,2,3,4,5,6,7,,,,," 
	3.0.1 :118 > x.split(",")
	 => ["1", "2", "3", "4", "5", "6", "7"] 
	3.0.1 :119 > x.split(",",4)
	 => ["1", "2", "3", "4,5,6,7,,,,,"] 
	3.0.1 :120 > x.split(",",-7)
	=> ["1", "2", "3", "4", "5", "6", "7", "", "", "", "", ""] 
	
26.chars -> convert a string t a character array

	ex-3.0.1 :001 > x = "Hello world"
	 => "Hello world" 
	3.0.1 :002 > x.chars
 	=> ["H", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"] 

27.count -> Get the count of characters of a string, The str.count takes one or more sets of characters as parameters. After that we take the intersection of these sets to get the final characters set.

	ex- 3.0.1 :004 > x= "aabbcccdddeee"
	 => "aabbcccdddeee" 
	3.0.1 :005 > x.count("a-c")
	 => 7 
	3.0.1 :006 > x.count("a")
	 => 2 
	3.0.1 :007 > x.count("a-b")

  -> we can use it for counting multiple characters, 

	ex- 3.0.1 :008 > x = "Umberalla"
 	=> "Umberalla" 
	3.0.1 :009 > x.count("aeiou")
 	=> 3 
	
  -> ^ we use this to negate the character.

	ex- 3.0.1 :010 > x.count("^aeiou")
 	=> 6 

  ->we can also count different character symbol 

	ex- 3.0.1 :011 > x = "hello*&^ my name is"
 	=> "hello*&^ my name is" 
	3.0.1 :012 > x.count("^a")
 	=> 18 

  ->if we want more explicit about the allowed character set, we can use 

	ex-3.0.1 :014 > x.count("^aeiou")
 	=> 13 
	NOTE- Here if we want to count the consonants it count special character too, to 	      over come this 

	ex- 3.0.1 :016 > x.count("a-z", "^aeiou")
	 => 6 

  ->if we want to count ^ and - we have to use escape character 

	ex- 3.0.1 :018 > x.count("\\^\\-0-9")
 	=> 7 

28.prepend -> Add a string before another string, append one or more characters to a string at the beginning of a string

	ex-3.0.1 :020 > x
	 => "World" 
	3.0.1 :021 > x.prepend("Hello ")
 	=> "Hello World" 
	3.0.1 :022 > x
	 => "Hello World" 

29.Trim a string -> the st.trim will remove any of the following leading and trailing characters(\x00"), horizontal tab("\t"), linefeed(\n), vertical tab("\v")carriage return space (" ")

	ex-3.0.1 :023 > x = "hello world \n\t\v\r  "
	 => "hello world \n\t\v\r  " 
	3.0.1 :024 > x.strip
 	=> "hello world" 
	3.0.1 :025 > 

30.swapcase -> The swap case method transforms the uppercase letters in a string to lowercase and the lowercase letters to uppercase

	ex-3.0.1 :026 > x =" HELLo WOrld"
 	=> " HELLo WOrld" 
	3.0.1 :027 > x.swapcase
	 => " hellO woRLD" 

31.concatenation. Ruby implements some methods to concatenate two strings together.

	-> concate method 

	ex- 3.0.1 :001 > x = "Hello "
 	=> "Hello " 
	3.0.1 :002 > x.concat "World"
	 => "Hello World" 
	3.0.1 :003 > x
 	=> "Hello World" 

32.chomp -> This method removes the last character in a string, only if it's a carriage return or newline (\r,\n).
	
	ex- 3.0.1 :004 > x = "Hello world\r"
	 => "Hello world\r" 
	3.0.1 :005 > x.chomp
	 => "Hello world" 
	3.0.1 :006 > x<<"\r"
	 => "Hello world\r\r" 
	3.0.1 :007 > x<<"\n"
	 => "Hello world\r\r\n" 
	3.0.1 :008 > x.chomp
	 => "Hello world" 


33.chop -> it remove the last character of the string

	ex- .0.1 :016 > x = "Hello world"
 	=> "Hello world" 
	3.0.1 :017 > x.chop
 	=> "Hello worl" 

34.gsub -> it replace every reference of the first parameter for the second parameter on a string.

	ex-3.0.1 :024 > x
 	=> " Hello world" 
	3.0.1 :025 > x.gsub("world", "Aaquib")
 	=> " Hello Aaquib" 


35 To integer -> it converts a string to an integer

	ex -> 3.0.1 :026 > x = "12"
 	=> "12" 
	3.0.1 :027 > x.to_i
 	=> 12 

36.size() -> it returns the number of elements in the set 

	ex-3.0.1 :036 > x = "hello"
	 => "hello" 
	3.0.1 :037 > x.size

	 => 5
37.Convert an array to a string- This method is used to convert an array to string 

	ex- 3.0.1 :040 > arr = ['q','f','g','t']
	 => ["q", "f", "g", "t"] 
	3.0.1 :041 > y = arr.join
	 => "qfgt" 
	3.0.1 :042 > y
 	=> "qfgt" 

   -> We can also pass an argument as a separator 

	ex-3.0.1 :043 > arr
	 => ["q", "f", "g", "t"] 
	3.0.1 :044 > y = arr.join("+")
	 => "q+f+g+t" 
	3.0.1 :045 > y
 	=> "q+f+g+t" 

38.Crate a Multiline strings->there is two ways to do this 

  1.%Q -> 3.0.1 :043 > arr
	 => ["q", "f", "g", "t"] 
	3.0.1 :044 > y = arr.join("+")
 	=> "q+f+g+t" 
	3.0.1 :045 > y
	 => "q+f+g+t" 
 
  2.using heredocs ->3.0.1 :060"> X = <<-STRING
	3.0.1 :061"> hello 
	3.0.1 :062"> world 
	3.0.1 :063"> this 
	3.0.1 :064"> is 
	3.0.1 :065 > STRING
	 => "hello \nworld \nthis \nis \n" 

39.How to change string encodings -> Strings are stored as a sequence of bytes, they are turned into the characters that you can see based on their encoding.

	ex-3.0.1 :066 > x = 'Hello'
	 => "Hello" 
	3.0.1 :067 > x.encoding
 	=> #<Encoding:UTF-8> 

  -> to change the encoding we pass a arguments 

	ex- x.force_encoding("UTF-8")

40.casecmp?(other_string) -> It returns true if self string and other_string are equal after unicode case folding, otherwise false.

	UNICODE - ASCII have only 256 character to represent in computer system 
		and there are so many language in the world to overcome this Scinetis 			introduce UNICODE which supports unto 65535 character


	CASE FOLDING - It is defined as a process applied to a sequence of characters, in 	which those identified as non-uppercase are replaced by their uppercase 		equivalents.


	ex - 3.0.1 :069 > 'food'.casecmp?('foo')
 	=> false 
	3.0.1 :070 > 'Food'.casecmp?('food')
 	=> true 
	3.0.1 :071 > 'foo'.casecmp?('Food')
 	=> false 
	3.0.1 :072 > 'FOO'.casecmp?('Foo')
 	=> true 
METHOD OF CREATING A STRING	
41. ::new -> String.new(string,enconding:encoding,capacity:size)

	-> use to make a new string with different and capacity
	0.1 :027 > s = String.new("world")
	 => "world" 
	3.0.1 :028 > s
	 => "world"
	.0.1 :029 > x = String.new("Hello", encoding: 'ASCII')
 	=> "Hello"
	3.0.1 :031 > x.encoding
	 => #<Encoding:US-ASCII> 
	3.0.1 :032 > 

42.String =~regexp -> integer or nil

	3.0.1 :054 > s
 	=> "world" 
	3.0.1 :055 > s =~/o/
	 => 1 
	3.0.1 :056 > s =~/d/
	 => 4 
	3.0.1 :057 > s =~/r/
	 => 2 
	3.0.1 :058 > s =~/w/
	=> 0 
	3.0.1 
	3.0.1 :059 > s =~/q/
 	=> nil 
43.ascii_only? -> it return true for a string which has only ASCII character
	 ex->3.0.1 :060 > s
 	=> "world" 
	3.0.1 :061 > s.ascii_only?
 	=> true 
	3.0.1 :066 > s.ascii_only?
	 => true 
	3.0.1 :067 > s = "Hello©"
	 => "Hello©" 
	3.0.1 :068 > s.ascii_only?
 	=> false 	
44.capitaliz! -> It return a string by converting first character to uppercase and the 			remainder lowercase
	 
	 ex- .0.1 :081 > s.capitalize
	 => "Hello" 
	3.0.1 :082 > s
	 => "hello" 
	3.0.1 :083 > s.capitalize!
	 => "Hello" 
	3.0.1 :
45.chars -> Returns an array of characters in str.

	ex->3.0.1 :085 > s
	=> "Hello" 
	3.0.1 :086 > s.chars
	 => ["H", "e", "l", "l", "o"] 
	3.0.1 :087 > 

46.chop -> Returns a new string with the last character removed.
	Note - if the string ends with \r\n, both characters are removed.

	ex-3.0.1 :089 > x = "Hello world"
	 => "Hello world" 
	3.0.1 :090 > x.chop
 	=> "Hello worl" 
	3.0.1 :092 > x = "Hello world\r\n"
	 => "Hello world\r\n" 
	3.0.1 :093 > x.chop
 	=> "Hello world" 
	3.0.1 :095 > x = "hello\n\r"
 	=> "hello\n\r" 
	3.0.1 :096 > x.chop
 	=> "hello\n"

47.chop! -> it returns a self chop string

	ex -3.0.1 :106 > x.chop!
	 => "hello\n" 
	3.0.1 :107 > x.chop!
	 => "hello" 
	3.0.1 :108 > x
	 => "hello

48.delete -> Returns a string after deleting all the character from string that is listed 	given in arguments

	ex - 3.0.1 :109 > x
	 => "hello" 
	3.0.1 :110 > x.delete "l"
 	=> "heo"
	3.0.1 :121 > x.delete "el", "lo"
 	=> "heo" 
49.delete! ->
	ex- 3.0.1 :122 > x
	 => "hello" 
	3.0.1 :123 > x.delete! "el", "lo"
 	=> "heo" 
	3.0.1 :124 > x
 	=> "heo" 

50.delete_prefix -> delete a leading character from string

	ex - 3.0.1 :125 > x
	 => "heo" 
	3.0.1 :126 > x.delete_prefix "h"
 	=> "eo" 

51.delete_suffix -> delete trailing character from string

	ex - 3.0.1 :133 > x
	 => "hello" 
	3.0.1 :134 > x.delete_suffix("lo")
 	=> "hel" 

52.delete_prefix!-> Delete leading character from string and return string if no changes 	made it return nil

	ex -3.0.1 :131 > x.delete_prefix! "lo"
	 => nil 

53. delete_suffix! -> Delete trailing character form string and return string if no 		changes made it return

 	ex - 3.0.1 :136 > x.delete_suffix!("he")
 	=> nil 

54.end_with? -> Returns true or false if strings end with given suffixes.

	ex - 3.0.1 :141 > x.end_with?("He")
	 => false 
	3.0.1 :142 > x.end_with?("ld")
	 => true 
	3.0.1 :143 > x.end_with?("world")
	 => true 

	3.0.1 :14
55.eql? - Returns true if object has same length and contents else false

	ex - 3.0.1 :144 > x
 	=> "Hello world" 
	3.0.1 :145 > x.eql?("Hello world")
	 => true 
	3.0.1 :148 > x.eql?("Hello")
	 => false 

56.force_encoding(encoding) -> change the encoding to encoding and return 

	 ex - 3.0.1 :150 > x.encoding
	 => #<Encoding:UTF-8> 
	3.0.1 :151 > x.force_encoding(UNICODE)

57.inspect -> return a string with surrounded by quote marks, and escaped

	ex - .0.1 :159 > x
	 => "hemlo" 
	3.0.1 :160 > x.inspect
	 => "\"hemlo\"" 
	3.0.1 :161 > x[3]="\b"
	 => "\b" 
	3.0.1 :162 > x
	 => "hem\bo" 
	3.0.1 :163 > x.inspect
	 => "\"hem\\bo\"" 

58.ljust(integer,padstr=') -> if the integer is greater than the length of string return a string of length integer with string left justified with padstr, otherwise return string

	ex - 3.0.1 :164 > x = "leftright"
 	=> "leftright" 
	3.0.1 :165 > x.ljust(14, pdstr='12')
 	=> "leftright12121" 

59.succ -> return the successor to self. it is calculated by incrementing characters.

	ex - 3.0.1 :169 > x= "a"
 	=> "a" 
	3.0.1 :170 > x.succ
	 => "b" 
	3.0.1 :171 > x.succ!
	 => "b" 
	3.0.1 :172 > x
	 => "b" 
	3.0.1 :173 > x.succ!
 	=> "c" 

60.reverse! -> Reverse string in place

	ex - 3.0.1 :174 > x = "Hello"
 	=> "Hello" 
	3.0.1 :175 > x.reverse!
	 => "olleH" 
	3.0.1 :176 > x
 	=> "olleH" 


61.rindex -> return the index of the last occurance of the given string, else nil

	ex - 3.0.1 :177 > x = "Hello"
	 => "Hello" 
	3.0.1 :178 > x.rindex('H')
	 => 0 
	3.0.1 :179 > x.rindex('Hel')
	 => 0 
	3.0.1 :180 > x.rindex('Hpl')
 	=> nil 
62.rjust -> if the integer is greater than the length of string, returns a new string of length integer with string right justified and padded with padstr,otherwise returns string

	ex -3.0.1 :181 > x
 	=> "Hello" 
	3.0.1 :182 > x.rjust(13,padstr= '87')
 	=> "87878787Hello" 

63.valid_encoding? -> return true for a string if it encoded correctly

	ex - 3.0.1 :185 > "\xc2\xa1".force_encoding("UTF-8").valid_encoding?
	 => true 
	3.0.1 :186 > "\xc2".force_encoding("UTF-8").valid_encoding?
 	=> false 
64.tr(from_str,to_str) -> returns a string with the character in from _str replace by the corresponding characters in to_str, if to_str is shorter than from_str, it is padded with its last character in order to maintain the correspondence.

	ex - 3.0.1 :187 > x
 	=> "Hello" 
	3.0.1 :188 > x.tr('ei','lh')
	 => "Hlllo" 
	3.0.1 :189 > x.tr('ei','&')
 	=> "H&llo"