Date and time

->Ruby has mainly three classes related to date and time in its documentation

1.Date 

2.DateTime

3.Time


1.Date 

->Ruby provides two classes, date and datetime

FEW TERMINOLOGY IN DATE ADN DATETIME

1.calendar date ->the calendar date is a particular day within a calendar month within a year.

2. Ordinal date-> the ordinal date is a particular day of a calendar year identified by its ordinal number.

3.Week date->the week date is a day identified by calendar week and day numbers.The first calendar week of the year is the one which includes first Thursday of that year.

4.Julian day number -> the julian day number is in elapsed day since noon on January 1, 4713 BCE.


OTHER TERMINOLOGY IN DATETIME


1.GMT -> stand for Greenwich time

2.UCT -> stand for co-ordinate universal time

3.EPOCH -> January 1st, 1970 


-> the date object is created with 

require 'date'

puts Date.new(2021,02,12)
puts Date.jd(2123423)
puts Date.ordinal(2021,1
puts Date.commercial(2021,5,6)
puts Date.parse('2021-02-12')
puts Date.strptime('21-02-2021', '%d-%m-%Y')
puts Time.new(2021,10,8).to_date
admin@admins-iMac ~ % ruby /Users/admin/Desktop/Ruby/practice.rb 
2017-04-03
2000-11-28
2017-01-03
2017-02-04
2017-02-03
2017-02-03
2017-10-08


METHODS IN DATE 

date.parse -> this method is used to parse any string that look like date.

3.0.1 :002 > require 'date'
 => true 
3.0.1 :003 > Date.parse("10/12/2021")
 => #<Date: 2021-12-10 ((2459559j,0s,0n),+0s,2299161j)> 
3.0.1 :004 > Date.parse("sep may june 2021")
 => #<Date: 2021-06-01 ((2459367j,0s,0n),+0s,2299161j)> 

->dateobject.year -> will give you year 

	ex - 3.0.1 :005 > de = Date.parse('12th May 2021')
	     => #<Date: 2021-05-12 ((2459347j,0s,0n),+0s,2299161j)> 
	     3.0.1 :007 > de.year
 	     => 2021 

->dateobject.mon ->  will give you a month

	ex - 3.0.1 :005 > de = Date.parse('12th May 2021')
 	     => #<Date: 2021-05-12 ((2459347j,0s,0n),+0s,2299161j)> 
	     3.0.1 :008 > de.month
	     => 5 

->dateobject.mday -> will give you date 

	ex - 3.0.1 :010 > de
	     => #<Date: 2021-05-12 ((2459347j,0s,0n),+0s,2299161j)> 
		3.0.1 :009 > de.mday
 		=> 12 

->dateobject.wday-> will give you day 

	ex - 3.0.1 :010 > de
 	    => #<Date: 2021-05-12 ((2459347j,0s,0n),+0s,2299161j)> 
	    3.0.1 :013 > de.wday
 	    => 3 


DateTime -> Ruby DateTime is a subclass of Date. It easily handles date, hour, minute, second and offset.

	->The DateTime object created with DateTime.new, DateTime.ordinal, DateTime.parse, 	DateTime.jd, DateTime.commercial, DateTime.now, etc.


	ex - 3.0.1 :004 > puts DateTime.new(2021,5,13,15,16,34)
	2021-05-13T15:16:34+00:00
	 => nil 

Note -> The last element of day, minute, second or hour can be fractional.



Methods of DateTime

1.datetimeobject.hour -> will give you hour

	ex - 3.0.1 :007 > de = DateTime.new(2021,5,13,15,16,34)
	 => #<DateTime: 2021-05-13T15:16:34+00:00 ((2459348j,54994s,0n),+0s,229916... 
	3.0.1 :008 > puts de.hour
	15
	 => nil 

2.datetimeobject.min -> will give you hour 


	ex - 3.0.1 :010 > de = DateTime.new(2021,5,13,15,16,34)
	 => #<DateTime: 2021-05-13T15:16:34+00:00 ((2459348j,54994s,0n),+0s,229916... 
	3.0.1 :011 > puts de.min
	16
	 => nil 

3.datetimeobject.sec -> will give you sec 


	ex - 3.0.1 :012 > de = DateTime.new(2021,5,13,15,16,34)
	 => #<DateTime: 2021-05-13T15:16:34+00:00 ((2459348j,54994s,0n),+0s,229916... 
	3.0.1 :013 > puts de.sec
	34
 	=> nil 

4.datetimeobject.offset ->this method will returns the datetime object offset


	ex - 3.0.1 :014 > de = DateTime.new(2021,5,13,15,16,34)
	 => #<DateTime: 2021-05-13T15:16:34+00:00 ((2459348j,54994s,0n),+0s,229916... 
	3.0.1 :015 > puts de.offset
	0/1
	 => nil 

5.datetimeobject.zone -> this method will give you the time zone


	ex - 3.0.1 :016 > de = DateTime.new(2021,5,13,15,16,34)
	 => #<DateTime: 2021-05-13T15:16:34+00:00 ((2459348j,54994s,0n),+0s,229916... 
	3.0.1 :017 > puts de.zone
	+00:00
	 => nil 

6.datetimeobject.new_offset -> will create new offset

	ex - 3.0.1 :018 > puts de = de.new_offset('+05:00')
	2021-05-13T20:16:34+05:00
	 => nil 

7.datetimeobject.strftime('%I:%M:%S %p') ->


	ex - 3.0.1 :019 > puts de.strftime('%I:%M:%S %p')  
	08:16:34 PM
	 => nil 

8.datetimeobject > other_datetimeobject  -> this method will give you true if your datetime object is greater or after the other_datetimeobject


	ex - 3.0.1 :020 > puts de > DateTime.new(2020)
	true
	 => nil 
	3.0.1 :021 > puts de > DateTime.new(2022)
	false
	 => nil 
	3.0.1 :022 > puts de > DateTime.new(2019)
	true
	 => nil 

 Time -> Time class is an abstraction of dates and times. It is stored internally as the number of seconds since Epoch time. The Time class treats GMT (Grenwich Mean Time) and UTC (Coordinated Universal Time) equivalent.
	-> Times may appear equal but on comparison they may be different as all times may have fraction.
	-> Time implementation uses a signed 63 bit integer, Bignum or Rational. Time works slower when integer is used.



Creating a new Time Instance 


	-> A new Time instance can be created with ::new. This will use your current system's time. Parts of time like year, month, day, hour, minute, etc can also be passed.


	-> While creating a new time instance, you need to pass at least a year. If only year is passed, then time will default to January 1 of that year at 00:00:00 with current system time zone.



create Time object 

1.Time.new

 
3.0.1 :023 > puts Time.new
2021-05-13 14:52:09 +0530
 => nil 
3.0.1 :024 > puts Time.new(2021,3)
2021-03-01 00:00:00 +0530
 => nil 
3.0.1 :025 > puts Time.new(2021,3, 4, 6, 5, 5, "+05:00")  
2021-03-04 06:05:05 +0500
 => nil 



Time with gm, utc and local functions

	->Instead of using current system setting, you can also use GMT, local and UTC 		timezones.


	ex - 3.0.1 :026 > puts Time.local(2021,2,14)
	2021-02-14 00:00:00 +0530
 	=> nil 
	3.0.1 :027 > puts Time.utc(2021,2,14)
	2021-02-14 00:00:00 UTC
 	=> nil 
	3.0.1 :028 > puts Time.gm(2021,2,14)
	2021-02-14 00:00:00 UTC
 	=> nil 


Working with an instance of time


	-> After creating an instance of time, we can work on that time in following ways.

	ex - 3.0.1 :031 > t = Time.new(221,05,14,15,12,22,"+05:00")
	 => 0221-05-14 15:12:22 +0500 
	3.0.1 :033 > puts t.friday?
	false
	 => nil 
	3.0.1 :035 > puts t.sunday?
	false
	 => nil 
	3.0.1 :036 > puts t.tuesday?
	false
	 => nil 
	3.0.1 :037 > puts t.monday?
	true
	 => nil
	3.0.1 :038 > puts t.year
	221
	 => nil 
	3.0.1 :039 > puts t.dst?
	false
	 => nil 
	3.0.1 :040 > puts t.to_i
	-55181569658
	 => nil 
	3.0.1 :041 > te = Time.new(2021)
	 => 2021-01-01 00:00:00 +0530 
	3.0.1 :042 > tm = Time.new(2020)
	 => 2020-01-01 00:00:00 +0530 
	3.0.1 :043 > puts te == tm
	false
	 => nil 
	3.0.1 :044 > puts te == te 
	true
	 => nil 
	3.0.1 :045 > puts te < tm
	false
	 => nil 
	3.0.1 :046 > puts te > tm
	true
	 => nil 
	3.0.1 :047 > puts Time.new(2021,05,13).between?(te,tm)
	false
	 => nil 


Timezones and daylight savings time

	-> A Time object can be used to get all the information related to timezones. All 	the information will be displayed respective to current time of our system.


	ex - 3.0.1 :048 > time = Time.new
	 => 2021-05-13 15:54:37.421122 +0530 
	3.0.1 :049 > puts time.zone
	IST
	 => nil 
	3.0.1 :050 > puts time.utc_offset
	19800
	 => nil 
	3.0.1 :051 > time.zone
	 => "IST" 
	3.0.1 :052 > time.isdst
	 => false 
	3.0.1 :053 > time.utc?
	 => false 
	3.0.1 :055 > puts time.localtime
	2021-05-13 15:54:37 +0530
	 => nil 
	3.0.1 :056 > puts time.gmtime
	2021-05-13 10:24:37 UTC
	 => nil 
	3.0.1 :057 > puts time.getlocal
	2021-05-13 15:54:37 +0530
	 => nil 
	3.0.1 :058 > puts time.getutc
	2021-05-13 10:24:37 UTC
	 => nil 
	
Ruby time formatting
 -> Ruby formats time objects in a specific way by default.but you may want somethings else sometimes that adapts to your use case


 -> you can use a method to get almost any format you need


strftime -> this method mean 'format time.'

 -> it works by passing a string with format specifiers, tases specifiers will be replaced  by a value. if you have ever used the printf method the idea is very similar 

	ex -  => 2021-05-13 16:34:00.342982 +0530 
	3.0.1 :060 > time.strftime("%d/%m/%Y")
	 => "13/05/2021" 
	3.0.1 :062 > time.strftime("%k:%M")
 	=> "16:34"
	3.0.1 :062 > time.strftime("%k:%M")
	 => "16:34" 
	3.0.1 :063 > time.strftime("%I:%M %p") 
	 => "04:34 PM" 
	3.0.1 :064 > time.strftime("Today is %A") 
	 => "Today is Thursday" 
	3.0.1 :065 > time.strftime("%d of %B, %Y")    
	 => "13 of May, 2021" 
	3.0.1 :066 > time.strftime("Unix time is %s")
	 => "Unix time is 1620903840" 


strftime format table ->
	1. %d -> Day of the month (01..31)
	2. %m -> Month of the year (01..12) Use %-m for (1..12)
	3, %k -> Hour (0..23)
	4. %M -> Minutes
	5. %S -> Seconds (00..60)
	6. %I -> Hour (1..12)
	7. %p -> AM/PM
	8. %Y -> Year
	10.%A -> Day of the week (name)
	11.%B -> Month (name)


Generating a timestamp

	-> you can generate a time-zone independent timestamp to date specific events.

	ex - 3.0.1 :067 > Time.now.to_i
 	=> 1620904372 
	3.0.1 :068 > Time.now
 	=> 2021-05-13 16:42:59.520821 +0530

Time difference (Addition & Substraction) 

	-> Sometimes you donâ€™t want the current time, but a time in the future or the past.
	-> You can do addition with time objects

	-> Remember that the internal representation for Time is in seconds, so you can do this:

	ex - 3.0.1 :069 > time1 = Time.new + 20
 	=> 2021-05-13 16:45:16.748082 +0530
	-> in this example you get a time object that is set 2 seconds from the current time.

	3.0.1 :070 > Time.new > time1
	 => true 
	3.0.1 :071 > Time.now - 68459
 	=> 2021-05-12 22:15:38.525552 +0530 

Date & Time parsing

	-> The Date.parse method will try to parse any string that looks like a date.

	-> It uses a simple heuristic algorithm that tries to detect the input format


	ex - 3.0.1 :072 > Date.parse("10/12/2021")
 	=> #<Date: 2021-12-10 ((2459559j,0s,0n),+0s,2299161j)> 
	3.0.1 :073 > Date.parse("april 4")
 	=> #<Date: 2021-04-04 ((2459309j,0s,0n),+0s,2299161j)> 


Date Constants -> The Date class has some constants
	       -> Months start at index 1 so you can get a direct month number -> month name mapping.
	      -> The days start with Sunday, but you can use the rotate method to have the week start on Monday.


	ex - 3.0.1 :075 > Date::MONTHNAMES
 	=> 
	[nil,
 	"January",
 	"February",
 	"March",
 	"April",
 	"May",
 	"June",
 	"July",
 	"August",
 	"September",
 	"October",
 	"November",
	 "December"]
	3.0.1 :076 > Date::DAYNAMES.rotate(2)
 	=> ["Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "Monday"] 
	3.0.1 :077 > Date::DAYNAMES.rotate(1)
 	=> ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] 
	3.0.1 :078 > Date::DAYNAMES.rotate(4)
 	=> ["Thursday", "Friday", "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday"] 